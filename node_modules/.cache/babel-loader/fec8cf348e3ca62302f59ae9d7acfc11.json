{"ast":null,"code":"var _jsxFileName = \"/Users/robina/Documents/MIAGE/React/bd-musique/src/App.js\";\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Button, AppBar, Toolbar, Typography, Drawer, List, ListItem, ListItemText, Divider } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab'; //import { ResponsiveBar } from '@nivo/bar'\n//import { ResponsiveBubble } from '@nivo/circle-packing'\n\nimport { Chart } from \"react-google-charts\";\nimport './App.css'; //////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  STYLES  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nconst drawerWidth = 250;\n\nconst styles = theme => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  drawer: {\n    width: drawerWidth\n  },\n  toolbarSpacer: theme.mixins.toolbar,\n  main: {\n    marginLeft: drawerWidth,\n    marginRight: 50,\n    marginTop: 50\n  },\n  card: {\n    marginLeft: 50,\n    marginRight: 50,\n    marginBottom: 50\n  },\n  cardTextFields: {\n    width: 600\n  }\n}); //////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////  APP  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      testing: false,\n      drawerItems: [\"GenrePopularity\", \"Artist\", \"CompareArtists\"],\n      drawerSelectedIndex: null,\n      genrePopularityShow: false,\n      languagePopularityShow: false,\n      countryPopularityShow: false,\n      searchAllShow: false,\n      artistShow: false,\n      compareArtistsShow: false,\n      compareSongsShow: false,\n      totalArtistDB: null,\n      totalAlbumDB: null,\n      totalSongDB: null,\n      topGenre: null,\n      topLanguage: null,\n      topCountry: null,\n      top10Country: null,\n      searchAllInput: null,\n      searchAllResult: [],\n      searchAllSelection: null,\n      searchArtistInput: null,\n      searchArtistResult: [],\n      searchArtistSelection: null,\n      artistData: null,\n      artistAlbumsPerYear: null,\n      artistSongsPerYear: null,\n      songData: null,\n      searchArtist1Input: null,\n      searchArtist1Result: [],\n      searchArtist1Selection: null,\n      artist1Data: null,\n      searchArtist2Input: null,\n      searchArtist2Result: [],\n      searchArtist2Selection: null,\n      artist2Data: null,\n      compareArtistsData: null,\n      searchSong1Input: null,\n      searchSong1Result: [],\n      searchSong1Selection: null,\n      searchSong2Input: null,\n      searchSong2Result: [],\n      searchSong2Selection: null\n    };\n  } /////////////////////////////////////////\n\n\n  componentDidMount() {}\n\n  searchArtistData() {\n    const searchedArtist = this.input.value.trim();\n    this.setState({\n      artist: searchedArtist\n    });\n    const request = `https://wasabi.i3s.unice.fr/api/v1/artist/name/${encodeURI(searchedArtist)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data != null) this.setState({\n        artistData: data\n      });else this.setState({\n        artistData: {}\n      }); //console.log(this.state.artistData)\n    });\n  }\n\n  getState() {\n    console.log(this.state);\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  REQUESTS  ///////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  getDBStats() {\n    const request = \"https://wasabi.i3s.unice.fr/search/dbinfo\";\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        totalArtistDB: data.nbArtist,\n        totalAlbumDB: data.nbAlbum,\n        totalSongDB: data.nbSong\n      });\n    });\n  }\n\n  getGenrePopularity(limit) {\n    let request = `https://wasabi.i3s.unice.fr/api/v1/artist/genres/popularity`;\n    if (limit) request += `?limit=${limit}`;\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data == null) this.setState({\n        topGenre: null\n      });else this.getGenrePopularityData(data);\n    });\n  }\n\n  getLanguagePopularity() {\n    const request = `https://wasabi.i3s.unice.fr/api/v1/song/lyrics/language/popularity`;\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data == null) this.setState({\n        topLanguage: null\n      });else this.getLanguagePopularityData(data);\n    });\n  }\n\n  getCountryPopularity(limit) {\n    let request = `https://wasabi.i3s.unice.fr/api/v1/artist/country/popularity`;\n    if (limit) request += `?limit=${limit}`;\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data == null) this.setState({\n        topCountry: null,\n        top10Country: null\n      });else this.getCountryPopularityData(data);\n    }).catch(error => {\n      console.log(error);\n    });\n  } // Requête : recherche d'artistes et chansons\n\n\n  getArtistOrSongBySearch(search) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data != null) this.setState({\n        searchAllResult: data\n      });else this.setState({\n        searchAllResult: null\n      });\n    });\n  } // Requête : recherche d'artistes\n\n\n  getArtistBySearch(search, artistId) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      let searchResult;\n      if (data != null) searchResult = data.filter(option => !option.title);else searchResult = [];\n      if (artistId === \"artist1\") this.setState({\n        searchArtist1Result: searchResult\n      });else if (artistId === \"artist2\") this.setState({\n        searchArtist2Result: searchResult\n      });else this.setState({\n        searchArtistResult: searchResult\n      });\n    });\n  } // Requête : recherche de chansons\n\n\n  getSongBySearch(search, songId) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      let searchResult;\n      if (data != null) searchResult = data.filter(option => option.title);else searchResult = [];\n      if (songId === \"song1\") this.setState({\n        searchSong1Result: searchResult\n      });else this.setState({\n        searchSong2Result: searchResult\n      });\n    });\n  } // Requête : recherche d'un artiste par son nom\n\n\n  getArtistByName(name, artistId) {\n    const request = `https://wasabi.i3s.unice.fr/api/v1/artist_all/name/${encodeURI(name)}`;\n    console.log(request);\n    fetch(request, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (artistId === \"artist1\") {\n        this.setState({\n          artist1Data: data\n        });\n        if (this.state.artist2Data) this.getCompareArtistsData();\n      } else if (artistId === \"artist2\") {\n        this.setState({\n          artist2Data: data\n        });\n        if (this.state.artist1Data) this.getCompareArtistsData();\n      } else {\n        this.setState({\n          artistData: data\n        });\n        this.getArtistChartData(data);\n      }\n    });\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  HANDLERS  ///////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  handleListItemSelect(e, i) {\n    this.setState({\n      drawerSelectedIndex: i\n    });\n\n    switch (i) {\n      case 0:\n        this.setState({\n          genrePopularityShow: true,\n          languagePopularityShow: false,\n          countryPopularityShow: false,\n          artistShow: false,\n          compareArtistsShow: false\n        });\n        break;\n\n      case 1:\n        this.setState({\n          genrePopularityShow: false,\n          languagePopularityShow: true,\n          countryPopularityShow: false,\n          artistShow: false,\n          compareArtistsShow: false\n        });\n        break;\n\n      case 2:\n        this.setState({\n          genrePopularityShow: false,\n          languagePopularityShow: false,\n          countryPopularityShow: true,\n          artistShow: false,\n          compareArtistsShow: false\n        });\n        break;\n\n      case 3:\n        this.setState({\n          genrePopularityShow: false,\n          languagePopularityShow: false,\n          countryPopularityShow: false,\n          artistShow: true,\n          compareArtistsShow: false\n        });\n        break;\n\n      case 4:\n        this.setState({\n          genrePopularityShow: false,\n          languagePopularityShow: false,\n          countryPopularityShow: false,\n          artistShow: false,\n          compareArtistsShow: true\n        });\n        break;\n    }\n  } // Handler de la recherche d'artiste ou chanson (TextField onChange)\n\n\n  searchAll(e) {\n    const value = e.target.value.trim();\n    this.setState({\n      searchAllInput: value\n    });\n    if (value) this.getArtistOrSongBySearch(value);else this.setState({\n      searchAllResult: null\n    });\n  } // Handler de la recherche d'artiste (TextField onChange)\n\n\n  searchArtist(e, artistId) {\n    const value = e.target.value.trim();\n    if (artistId === \"artist1\") this.setState({\n      searchArtist1Input: value\n    });else if (artistId === \"artist2\") this.setState({\n      searchArtist2Input: value\n    });else this.setState({\n      searchArtistInput: value\n    });\n    if (value) this.getArtistBySearch(value, artistId);else {\n      if (artistId === \"artist1\") this.setState({\n        searchArtist1Result: []\n      });else if (artistId === \"artist2\") this.setState({\n        searchArtist2Result: []\n      });else this.setState({\n        searchArtistResult: []\n      });\n    }\n  } // Handler de la recherche de chanson (TextField onChange)\n\n\n  searchSong(e, songId) {\n    const value = e.target.value.trim();\n    if (songId === \"song1\") this.setState({\n      searchSong1Input: value\n    });else this.setState({\n      searchSong2Input: value\n    });\n    if (value) this.getSongBySearch(value, songId);else {\n      if (songId === \"song1\") this.setState({\n        searchSong1Result: []\n      });else this.setState({\n        searchSong2Result: []\n      });\n    }\n  } // Handler de la sélection d'un élément suggéré\n\n\n  handleSearchOptionSelection(e, field, type) {\n    const selection = e.target.textContent;\n\n    if (selection) {\n      if (!type) {\n        let split = selection.split(\"(\");\n        let value = split[0].trim();\n        this.setState({\n          searchAllSelection: value\n        });\n\n        if (split[1] === \"artiste)\") {\n          console.log(\"You've searched an artist: \" + value);\n          this.getArtistByName(value);\n        } else console.log(\"You've searched a song: \" + value);\n      } else {\n        switch (field) {\n          case \"artist\":\n            this.setState({\n              searchArtistSelection: selection\n            });\n            this.getArtistByName(selection);\n            break;\n\n          case \"artist1\":\n            this.setState({\n              searchArtist1Selection: selection\n            });\n            break;\n\n          case \"artist2\":\n            this.setState({\n              searchArtist2Selection: selection\n            });\n            break;\n\n          case \"song1\":\n            this.setState({\n              searchSong1Selection: selection\n            });\n            break;\n\n          case \"song2\":\n            this.setState({\n              searchSong2Selection: selection\n            });\n            break;\n\n          default:\n        }\n\n        if (type === \"artist\") console.log(\"You've searched an artist: \" + selection);else if (type === \"song\") console.log(\"You've searched a song: \" + selection);\n      }\n    } else {\n      console.log(\"clear \" + field);\n      this.clearProps(field);\n    }\n  }\n\n  handleGetArtistDataButtonClick(e) {\n    this.getArtistByName(this.state.searchArtistSelection);\n  } // Handler\n\n\n  handleCompareButtonClick(e, type) {\n    if (type === \"artist\") {\n      let artist1 = this.state.searchArtist1Selection;\n      let artist2 = this.state.searchArtist2Selection;\n\n      if (artist1 && artist2) {\n        if (artist1 === artist2) {\n          console.log(\"you want to compare the same artists\");\n        } else {\n          this.getArtistByName(artist1, \"artist1\");\n          this.getArtistByName(artist2, \"artist2\");\n        }\n      } else {\n        console.log(\"missing 1 artist at least\");\n      }\n    } else {\n      let song1 = this.state.searchSong1Selection;\n      let song2 = this.state.searchSong2Selection;\n\n      if (song1 && song2) {\n        if (song1 === song2) {\n          console.log(\"you want to compare the same songs\");\n        } else {\n          //this.getSongByName(song1)\n          //this.getSongByName(song2)\n          console.log(\"TODO\");\n        }\n      } else {\n        console.log(\"missing 1 song at least\");\n      }\n    }\n  } //////////////////////////////////////////////////////////////////////////////////\n  /////////////////////////////////////  DATA  /////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n  // Supprime les données correspondant à l'id donné\n\n\n  clearProps(id) {\n    switch (id) {\n      case \"artist\":\n        this.setState({\n          searchArtistInput: null,\n          searchArtistResult: [],\n          searchArtistSelection: null,\n          artistData: null,\n          artistAlbumsPerYear: null,\n          artistSongsPerYear: null\n        });\n        break;\n\n      case \"artist1\":\n        this.setState({\n          searchArtist1Input: null,\n          searchArtist1Result: [],\n          searchArtist1Selection: null,\n          artist1Data: null,\n          compareArtistsData: null\n        });\n        break;\n\n      case \"artist2\":\n        this.setState({\n          searchArtist2Input: null,\n          searchArtist2Result: [],\n          searchArtist2Selection: null,\n          artist2Data: null,\n          compareArtistsData: null\n        });\n        break;\n\n      case \"song1\":\n        this.setState({\n          searchSong1Input: null,\n          searchSong1Result: [],\n          searchSong1Selection: null\n        });\n        break;\n\n      case \"song2\":\n        this.setState({\n          searchSong2Input: null,\n          searchSong2Result: [],\n          searchSong2Selection: null\n        });\n        break;\n\n      case \"all\":\n      default:\n        this.setState({\n          searchAllInput: null,\n          searchAllResult: [],\n          searchAllSelection: null\n        });\n    }\n  }\n\n  getGenrePopularityData(rawData) {\n    let chartData = [[\"Genre\", \"Nombre de chansons\"]];\n\n    for (let i = 0; i < rawData.length; i++) {\n      chartData.push([rawData[i]._id, rawData[i].sum]);\n    }\n\n    this.setState({\n      topGenre: chartData\n    });\n  }\n\n  getLanguagePopularityData(rawData) {\n    let chartData = [[\"Langue\", \"Nombre de chansons\"]];\n\n    for (let i = 0; i < 10; i++) {\n      let language = rawData[i]._id;\n      chartData.push([language.charAt(0).toUpperCase() + language.substring(1), rawData[i].sum]);\n    }\n\n    this.setState({\n      topLanguage: chartData\n    });\n  }\n\n  getCountryPopularityData(rawData) {\n    let chartData = [[\"Pays\", \"Nombre de chansons\"]];\n    let top10ChartData = [[\"Pays\", \"Nombre de chansons\"]];\n\n    for (let i = 0; i < rawData.length; i++) {\n      chartData.push([rawData[i]._id, rawData[i].sum]);\n      if (i < 10) top10ChartData.push([rawData[i]._id, rawData[i].sum]);\n    }\n\n    this.setState({\n      topCountry: chartData,\n      top10Country: top10ChartData\n    });\n  }\n\n  getArtistChartData(rawData) {\n    let albumPublicationYear = {};\n    let songPublicationYears = {};\n    const albumList = rawData.albums;\n\n    for (let i = 0; i < albumList.length; i++) {\n      let albumYear = albumList[i].publicationDate;\n      if (albumPublicationYear[albumYear]) albumPublicationYear[albumYear]++;else albumPublicationYear[albumYear] = 1;\n      let songList = albumList[i].songs;\n\n      for (let j = 0; j < songList.length; j++) {\n        let songYear = songList[j].publicationDate.split('-')[0];\n        if (songPublicationYears[songYear]) songPublicationYears[songYear]++;else songPublicationYears[songYear] = 1;\n      }\n    }\n\n    let albumsPerYearData = [[\"Année\", \"Nombre d'albums\"]];\n    const albumYears = Object.keys(albumPublicationYear);\n\n    for (let i = 0; i < albumYears.length; i++) {\n      let year = albumYears[i];\n      if (year && year !== \"0000\") albumsPerYearData.push([parseInt(year), albumPublicationYear[year]]);\n    }\n\n    let songsPerYearData = [[\"Année\", \"Nombre de chansons\"]];\n    const songYears = Object.keys(songPublicationYears);\n\n    for (let i = 0; i < songYears.length; i++) {\n      let year = songYears[i];\n      if (year && year !== \"0000\") songsPerYearData.push([parseInt(year), songPublicationYears[year]]);\n    }\n\n    this.setState({\n      artistAlbumsPerYear: albumsPerYearData,\n      artistSongsPerYear: songsPerYearData\n    });\n  }\n\n  getCompareArtistsData() {\n    const artist1 = this.state.artist1Data;\n    const artist2 = this.state.artist2Data;\n\n    if (artist1 && artist2) {\n      let chartData = [[\"Champs\", this.state.searchArtist1Selection, this.state.searchArtist2Selection], [\"Age / durée de vie\", this.calculAge(artist1), this.calculAge(artist2)], [\"Albums\", this.countAlbums(artist1.albums), this.countAlbums(artist2.albums)], [\"Chansons\", this.countSongs(artist1.albums), this.countSongs(artist2.albums)]];\n      this.setState({\n        compareArtistsData: chartData\n      });\n    } else {\n      console.log(\"missing artist data\");\n    }\n  }\n\n  calculAge(artist) {\n    let beginYear = artist.lifeSpan.begin.split(\"-\")[0];\n\n    if (artist.lifeSpan.ended) {\n      let endYear = artist.lifeSpan.end.split(\"-\")[0];\n      return parseInt(endYear) - parseInt(beginYear);\n    }\n\n    return 2020 - parseInt(beginYear);\n  }\n\n  countAlbums(albumList) {\n    let albums = 0;\n\n    for (let i = 0; i < albumList.length; i++) {\n      if (albumList[i].publicationDate) {\n        albums++;\n      }\n    }\n\n    return albums;\n  }\n\n  countSongs(albumList) {\n    let songsInEachAlbum = albumList.map(x => x.songs.length);\n    let songs = 0;\n\n    for (let i = 0; i < songsInEachAlbum.length; i++) songs += songsInEachAlbum[i];\n\n    return songs;\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  AFFICHAGE  //////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n  // Gère l'affichage d'un élément suggéré (en paramètre)\n\n\n  searchOptionRendering(option, type) {\n    if (type === \"artist\") return option.name;\n    if (option.title) return `${option.title} (chanson de ${option.name} de l'album ${option.albumTitle})`;else return `${option.name} (artiste)`;\n  }\n\n  getStateButtonDisplay() {\n    if (this.state.testing) return React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: this.getState.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, \"Get state\");\n  }\n\n  topGenreChart() {\n    if (this.state.genrePopularityShow) {\n      if (!this.state.topGenre) this.getGenrePopularity(10);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760\n        },\n        __self: this\n      }, \"Popularit\\xE9 des genres musicaux\"), React.createElement(Chart, {\n        id: \"topGenre\",\n        chartType: \"BarChart\",\n        data: this.state.topGenre,\n        width: 1000,\n        height: 700,\n        options: {\n          //chartArea: {width: '50%'},\n          hAxis: {\n            title: 'Nombre de chansons',\n            format: '#'\n          },\n          vAxis: {\n            title: 'Genres'\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761\n        },\n        __self: this\n      }));\n    }\n  }\n\n  topLanguageChart() {\n    if (this.state.languagePopularityShow) {\n      if (!this.state.topLanguage) this.getLanguagePopularity();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789\n        },\n        __self: this\n      }, \"Popularit\\xE9 des langues\"), React.createElement(Chart, {\n        id: \"topLanguage\",\n        chartType: \"BarChart\",\n        data: this.state.topLanguage,\n        width: 1000,\n        height: 700,\n        options: {\n          hAxis: {\n            title: 'Nombre de chansons',\n            format: '#'\n          },\n          vAxis: {\n            title: 'Langues'\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 790\n        },\n        __self: this\n      }));\n    }\n  }\n\n  topCountryChart() {\n    if (this.state.countryPopularityShow) {\n      if (!this.state.topCountry) this.getCountryPopularity();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 816\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 817\n        },\n        __self: this\n      }, \"Popularit\\xE9 des pays\"), React.createElement(Chart, {\n        id: \"topCountry\",\n        chartType: \"GeoChart\",\n        data: this.state.topCountry,\n        width: 1000,\n        height: 500,\n        options: {\n          hAxis: {\n            title: 'Nombre de chansons',\n            format: '#'\n          },\n          vAxis: {\n            title: 'Pays'\n          },\n          legend: {\n            position: 'none'\n          },\n          sizeAxis: {\n            minValue: 0\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818\n        },\n        __self: this\n      }), React.createElement(Chart, {\n        id: \"topCountry\",\n        chartType: \"BarChart\",\n        data: this.state.top10Country,\n        width: 1000,\n        height: 700,\n        options: {\n          title: 'Top 10 des pays qui produisent le plus de musique',\n          hAxis: {\n            title: 'Nombre de chansons',\n            format: '#'\n          },\n          vAxis: {\n            title: 'Pays'\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833\n        },\n        __self: this\n      }));\n    }\n  }\n  /*searchAllDisplay() {\n  \tif(this.state.searchAllShow) {\n  \t\treturn <div>\n  \t\t\t\t\t<h3>Chercher un artiste ou une chanson</h3>\n  \t\t\t\t\t<Autocomplete\n  \t\t\t\t\t\tfreeSolo\n  \t\t\t\t\t\toptions={ this.state.searchAllResult.map(option => this.searchOptionRendering(option)) }\n  \t\t\t\t\t\tfilterOptions={ options => { return options } }\n  \t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e) }\n  \t\t\t\t\t\trenderInput={ params => (\n  \t\t\t\t\t\t\t<TextField\n  \t\t\t\t\t\t\t\tid=\"searchAllTextField\"\n  \t\t\t\t\t\t\t\t{...params}\n  \t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n  \t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n  \t\t\t\t\t\t\t\tlabel=\"Recherche\"\n  \t\t\t\t\t\t\t\tmargin=\"normal\"\n  \t\t\t\t\t\t\t\tvariant=\"outlined\"\n  \t\t\t\t\t\t\t\tonChange={ e => this.searchAll(e) }\n  \t\t\t\t\t\t\t/>\n  \t\t\t\t\t\t) }\n  \t\t\t\t\t/>\n  \t\t\t\t</div>\n  \t}\n  }*/\n\n\n  searchArtistDisplay() {\n    if (this.state.artistShow) {\n      if (!this.state.artistData) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 885\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 886\n          },\n          __self: this\n        }, \"Chercher un artiste\"), React.createElement(Autocomplete, {\n          freeSolo: true,\n          options: this.state.searchArtistResult.map(option => this.searchOptionRendering(option, \"artist\")),\n          filterOptions: options => {\n            return options;\n          },\n          onChange: e => this.handleSearchOptionSelection(e, \"artist\", \"artist\"),\n          renderInput: params => React.createElement(TextField, Object.assign({\n            id: \"searchAllTextField\"\n          }, params, {\n            inputRef: input => this.input = input,\n            style: {\n              width: '300px'\n            },\n            label: \"Artiste\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            onChange: e => this.searchArtist(e, \"artist\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 893\n            },\n            __self: this\n          })),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 887\n          },\n          __self: this\n        }));\n      } else return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909\n        },\n        __self: this\n      }, this.state.artistData.name), React.createElement(Chart, {\n        chartType: \"ColumnChart\",\n        data: this.state.artistSongsPerYear,\n        height: 500,\n        options: {\n          title: 'Nombre de chansons par année',\n          hAxis: {\n            title: 'Années',\n            format: '#',\n            maxValue: 2020\n          },\n          vAxis: {\n            title: 'Nombre de chansons',\n            format: '#'\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }), React.createElement(Chart, {\n        chartType: \"ColumnChart\",\n        data: this.state.artistAlbumsPerYear,\n        height: 500,\n        options: {\n          title: \"Nombre d'albums par année\",\n          hAxis: {\n            title: 'Années',\n            format: '#',\n            maxValue: 2020\n          },\n          vAxis: {\n            title: \"Nombre d'albums\"\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"outlined\",\n        style: {\n          marginTop: 50\n        },\n        onClick: e => this.clearProps(\"artist\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 947\n        },\n        __self: this\n      }, \"Chercher un autre artiste\"));\n    }\n  }\n\n  compareArtistsDisplay() {\n    if (this.state.compareArtistsShow) {\n      const data = this.state.compareArtistsData;\n\n      if (!data) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 961\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 962\n          },\n          __self: this\n        }, \"Comparer deux artistes\"), React.createElement(Autocomplete, {\n          freeSolo: true,\n          options: this.state.searchArtist1Result.map(option => this.searchOptionRendering(option, \"artist\")),\n          filterOptions: options => {\n            return options;\n          },\n          onChange: e => this.handleSearchOptionSelection(e, \"artist1\", \"artist\"),\n          renderInput: params => React.createElement(TextField, Object.assign({\n            id: \"searchArtist1TextField\"\n          }, params, {\n            inputRef: input => this.input = input,\n            style: {\n              width: '300px'\n            },\n            label: \"Artiste #1\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            onChange: e => this.searchArtist(e, \"artist1\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 969\n            },\n            __self: this\n          })),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 963\n          },\n          __self: this\n        }), React.createElement(Autocomplete, {\n          freeSolo: true,\n          options: this.state.searchArtist2Result.map(option => this.searchOptionRendering(option, \"artist\")),\n          filterOptions: options => {\n            return options;\n          },\n          onChange: e => this.handleSearchOptionSelection(e, \"artist2\", \"artist\"),\n          renderInput: params => React.createElement(TextField, Object.assign({\n            id: \"searchArtist2TextField\"\n          }, params, {\n            inputRef: input => this.input = input,\n            style: {\n              width: '300px'\n            },\n            label: \"Artiste #2\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            onChange: e => this.searchArtist(e, \"artist2\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 987\n            },\n            __self: this\n          })),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 981\n          },\n          __self: this\n        }), React.createElement(Button, {\n          variant: \"outlined\",\n          onClick: e => this.handleCompareButtonClick(e, \"artist\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 999\n          },\n          __self: this\n        }, \"Comparer\"));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1003\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1004\n          },\n          __self: this\n        }, this.state.artist1Data.name, \" vs \", this.state.artist2Data.name), React.createElement(Chart, {\n          id: \"compareArtistsChart\",\n          chartType: \"BarChart\",\n          data: data,\n          options: {\n            title: 'Comparaison entre deux artistes'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1005\n          },\n          __self: this\n        }), React.createElement(Button, {\n          variant: \"outlined\",\n          style: {\n            marginTop: 50\n          },\n          onClick: e => {\n            this.clearProps(\"artist1\");\n            this.clearProps(\"artist2\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1012\n          },\n          __self: this\n        }, \"Faire une autre comparaison\"));\n      }\n    }\n  }\n  /*compareSongsDisplay() {\n  \tif(this.state.compareSongsShow) {\n  \t\treturn <div>\n  \t\t\t\t\t<h3>Comparer deux chansons</h3>\n  \t\t\t\t\t<Autocomplete\n  \t\t\t\t\t\tfreeSolo\n  \t\t\t\t\t\toptions={ this.state.searchSong1Result.map(option => this.searchOptionRendering(option, \"song\")) }\n  \t\t\t\t\t\tfilterOptions={ options => { return options } }\n  \t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song1\", \"song\") }\n  \t\t\t\t\t\trenderInput={ params => (\n  \t\t\t\t\t\t\t<TextField\n  \t\t\t\t\t\t\t\tid=\"searchSong1TextField\"\n  \t\t\t\t\t\t\t\t{...params}\n  \t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n  \t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n  \t\t\t\t\t\t\t\tlabel=\"Chanson #1\"\n  \t\t\t\t\t\t\t\tmargin=\"normal\"\n  \t\t\t\t\t\t\t\tvariant=\"outlined\"\n  \t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song1\") }\n  \t\t\t\t\t\t\t/>\n  \t\t\t\t\t\t) }\n  \t\t\t\t\t/>\n  \t\t\t\t\t<Autocomplete\n  \t\t\t\t\t\tfreeSolo\n  \t\t\t\t\t\toptions={ this.state.searchSong2Result.map(option => this.searchOptionRendering(option, \"song\")) }\n  \t\t\t\t\t\tfilterOptions={ options => { return options } }\n  \t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song2\", \"song\") }\n  \t\t\t\t\t\trenderInput={ params => (\n  \t\t\t\t\t\t\t<TextField\n  \t\t\t\t\t\t\t\tid=\"searchSong2TextField\"\n  \t\t\t\t\t\t\t\t{...params}\n  \t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n  \t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n  \t\t\t\t\t\t\t\tlabel=\"Chanson #2\"\n  \t\t\t\t\t\t\t\tmargin=\"normal\"\n  \t\t\t\t\t\t\t\tvariant=\"outlined\"\n  \t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song2\") }\n  \t\t\t\t\t\t\t/>\n  \t\t\t\t\t\t) }\n  \t\t\t\t\t/>\n  \t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleCompareButtonClick(e, \"song\") }>Comparer</Button>\n  \t\t\t\t</div>\n  \t}\n  }*/\n  //////////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////  RENDER  ////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        height: '500px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080\n      },\n      __self: this\n    }, React.createElement(AppBar, {\n      position: \"fixed\",\n      className: classes.appBar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084\n      },\n      __self: this\n    }, \"IBASAW\"), this.getStateButtonDisplay())), React.createElement(Drawer, {\n      variant: \"permanent\",\n      className: classes.drawer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.toolbarSpacer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092\n      },\n      __self: this\n    }), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 0,\n      onClick: e => this.handleListItemSelect(e, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Popularit\\xE9 des genres\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 1,\n      onClick: e => this.handleListItemSelect(e, 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Popularit\\xE9 des langues\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 2,\n      onClick: e => this.handleListItemSelect(e, 2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Popularit\\xE9 des pays\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112\n      },\n      __self: this\n    }), React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 3,\n      onClick: e => this.handleListItemSelect(e, 3),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Chercher un artiste\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 4,\n      onClick: e => this.handleListItemSelect(e, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Comparer deux artistes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: classes.main,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.toolbarSpacer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129\n      },\n      __self: this\n    }), this.topGenreChart(), this.topLanguageChart(), this.topCountryChart(), this.searchArtistDisplay(), this.compareArtistsDisplay()));\n  }\n\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["/Users/robina/Documents/MIAGE/React/bd-musique/src/App.js"],"names":["React","Component","withStyles","TextField","Button","AppBar","Toolbar","Typography","Drawer","List","ListItem","ListItemText","Divider","Autocomplete","Chart","drawerWidth","styles","theme","appBar","zIndex","drawer","width","toolbarSpacer","mixins","toolbar","main","marginLeft","marginRight","marginTop","card","marginBottom","cardTextFields","App","constructor","props","state","testing","drawerItems","drawerSelectedIndex","genrePopularityShow","languagePopularityShow","countryPopularityShow","searchAllShow","artistShow","compareArtistsShow","compareSongsShow","totalArtistDB","totalAlbumDB","totalSongDB","topGenre","topLanguage","topCountry","top10Country","searchAllInput","searchAllResult","searchAllSelection","searchArtistInput","searchArtistResult","searchArtistSelection","artistData","artistAlbumsPerYear","artistSongsPerYear","songData","searchArtist1Input","searchArtist1Result","searchArtist1Selection","artist1Data","searchArtist2Input","searchArtist2Result","searchArtist2Selection","artist2Data","compareArtistsData","searchSong1Input","searchSong1Result","searchSong1Selection","searchSong2Input","searchSong2Result","searchSong2Selection","componentDidMount","searchArtistData","searchedArtist","input","value","trim","setState","artist","request","encodeURI","console","log","fetch","then","response","json","data","getState","getDBStats","headers","nbArtist","nbAlbum","nbSong","getGenrePopularity","limit","getGenrePopularityData","getLanguagePopularity","getLanguagePopularityData","getCountryPopularity","getCountryPopularityData","catch","error","getArtistOrSongBySearch","search","getArtistBySearch","artistId","searchResult","filter","option","title","getSongBySearch","songId","getArtistByName","name","getCompareArtistsData","getArtistChartData","handleListItemSelect","e","i","searchAll","target","searchArtist","searchSong","handleSearchOptionSelection","field","type","selection","textContent","split","clearProps","handleGetArtistDataButtonClick","handleCompareButtonClick","artist1","artist2","song1","song2","id","rawData","chartData","length","push","_id","sum","language","charAt","toUpperCase","substring","top10ChartData","albumPublicationYear","songPublicationYears","albumList","albums","albumYear","publicationDate","songList","songs","j","songYear","albumsPerYearData","albumYears","Object","keys","year","parseInt","songsPerYearData","songYears","calculAge","countAlbums","countSongs","beginYear","lifeSpan","begin","ended","endYear","end","songsInEachAlbum","map","x","searchOptionRendering","albumTitle","getStateButtonDisplay","bind","topGenreChart","hAxis","format","vAxis","legend","position","topLanguageChart","topCountryChart","sizeAxis","minValue","searchArtistDisplay","options","params","maxValue","compareArtistsDisplay","render","classes","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\n\nimport { TextField, Button, AppBar, Toolbar, Typography, Drawer, List, ListItem, ListItemText, Divider } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\n\n//import { ResponsiveBar } from '@nivo/bar'\n//import { ResponsiveBubble } from '@nivo/circle-packing'\n\nimport { Chart } from \"react-google-charts\";\n\nimport './App.css'\n\n//////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  STYLES  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nconst drawerWidth = 250\n\nconst styles = theme => ({\n\tappBar: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t},\n\tdrawer: {\n\t\twidth: drawerWidth\n\t},\n\ttoolbarSpacer: theme.mixins.toolbar,\n\tmain: {\n\t\tmarginLeft: drawerWidth,\n\t\tmarginRight: 50,\n\t\tmarginTop: 50\n\t},\n\tcard: {\n\t\tmarginLeft: 50,\n\t\tmarginRight: 50,\n\t\tmarginBottom: 50\n\t},\n\tcardTextFields: {\n\t\twidth: 600\n\t}\n})\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////  APP  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\n\t\t\ttesting: false,\n\n\t\t\tdrawerItems: [\n\t\t\t\t\"GenrePopularity\",\n\t\t\t\t\"Artist\",\n\t\t\t\t\"CompareArtists\"\n\t\t\t],\n\t\t\tdrawerSelectedIndex: null,\n\n\t\t\tgenrePopularityShow: false,\n\t\t\tlanguagePopularityShow: false,\n\t\t\tcountryPopularityShow: false,\n\t\t\tsearchAllShow: false,\n\t\t\tartistShow: false,\n\t\t\tcompareArtistsShow: false,\n\t\t\tcompareSongsShow: false,\n\n\t\t\ttotalArtistDB: null,\n\t\t\ttotalAlbumDB: null,\n\t\t\ttotalSongDB: null,\n\n\t\t\ttopGenre: null,\n\t\t\ttopLanguage: null,\n\t\t\ttopCountry: null,\n\t\t\ttop10Country: null,\n\t\t\t\n\t\t\tsearchAllInput: null,\n\t\t\tsearchAllResult: [],\n\t\t\tsearchAllSelection: null,\n\n\t\t\tsearchArtistInput: null,\n\t\t\tsearchArtistResult: [],\n\t\t\tsearchArtistSelection: null,\n\t\t\tartistData: null,\n\t\t\tartistAlbumsPerYear: null,\n\t\t\tartistSongsPerYear: null,\n\n\t\t\tsongData: null,\n\n\t\t\tsearchArtist1Input: null,\n\t\t\tsearchArtist1Result: [],\n\t\t\tsearchArtist1Selection: null,\n\t\t\tartist1Data: null,\n\n\t\t\tsearchArtist2Input: null,\n\t\t\tsearchArtist2Result: [],\n\t\t\tsearchArtist2Selection: null,\n\t\t\tartist2Data: null,\n\n\t\t\tcompareArtistsData: null,\n\n\t\t\tsearchSong1Input: null,\n\t\t\tsearchSong1Result: [],\n\t\t\tsearchSong1Selection: null,\n\n\t\t\tsearchSong2Input: null,\n\t\t\tsearchSong2Result: [],\n\t\t\tsearchSong2Selection: null,\n\t\t}\n\t}\n\n\t/////////////////////////////////////////\n\n\tcomponentDidMount() {\n\t}\n\n\tsearchArtistData() {\n\t\tconst searchedArtist = this.input.value.trim()\n\t\tthis.setState({ artist: searchedArtist })\n\n\t\tconst request = `https://wasabi.i3s.unice.fr/api/v1/artist/name/${encodeURI(searchedArtist)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data != null)\n\t\t\t\t\tthis.setState({ artistData: data })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ artistData: {} })\n\t\t\t\t//console.log(this.state.artistData)\n\t\t\t})\n\t}\n\n\tgetState() {\n\t\tconsole.log(this.state)\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////\n\t///////////////////////////////////  REQUESTS  ///////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////\n\n\tgetDBStats() {\n\t\tconst request = \"https://wasabi.i3s.unice.fr/search/dbinfo\"\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttotalArtistDB: data.nbArtist,\n\t\t\t\t\ttotalAlbumDB: data.nbAlbum,\n\t\t\t\t\ttotalSongDB: data.nbSong\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tgetGenrePopularity(limit) {\n\t\tlet request = `https://wasabi.i3s.unice.fr/api/v1/artist/genres/popularity`\n\t\tif(limit)\n\t\t\trequest += `?limit=${limit}`\n\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data == null)\n\t\t\t\t\tthis.setState({ topGenre: null })\n\t\t\t\telse\n\t\t\t\t\tthis.getGenrePopularityData(data)\n\t\t\t})\n\t}\n\n\tgetLanguagePopularity() {\n\t\tconst request = `https://wasabi.i3s.unice.fr/api/v1/song/lyrics/language/popularity`\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data == null)\n\t\t\t\t\tthis.setState({ topLanguage: null })\n\t\t\t\telse\n\t\t\t\t\tthis.getLanguagePopularityData(data)\n\t\t\t})\n\t}\n\n\tgetCountryPopularity(limit) {\n\t\tlet request = `https://wasabi.i3s.unice.fr/api/v1/artist/country/popularity`\n\t\tif(limit)\n\t\t\trequest += `?limit=${limit}`\n\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data == null)\n\t\t\t\t\tthis.setState({ \n\t\t\t\t\t\ttopCountry: null,\n\t\t\t\t\t\ttop10Country: null\n\t\t\t\t\t})\n\t\t\t\telse\n\t\t\t\t\tthis.getCountryPopularityData(data)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error)\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'artistes et chansons\n\tgetArtistOrSongBySearch(search) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data != null)\n\t\t\t\t\tthis.setState({ searchAllResult: data })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchAllResult: null })\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'artistes\n\tgetArtistBySearch(search, artistId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet searchResult\n\t\t\t\tif(data != null)\n\t\t\t\t\tsearchResult = data.filter(option => !option.title)\n\t\t\t\telse\n\t\t\t\t\tsearchResult = []\n\t\t\t\tif(artistId === \"artist1\")\n\t\t\t\t\tthis.setState({ searchArtist1Result: searchResult })\n\t\t\t\telse if(artistId === \"artist2\")\n\t\t\t\t\tthis.setState({ searchArtist2Result: searchResult })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchArtistResult: searchResult })\n\t\t\t})\n\t}\n\n\t// Requête : recherche de chansons\n\tgetSongBySearch(search, songId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet searchResult\n\t\t\t\tif(data != null)\n\t\t\t\t\tsearchResult = data.filter(option => option.title)\n\t\t\t\telse\n\t\t\t\t\tsearchResult = []\n\t\t\t\tif(songId === \"song1\")\n\t\t\t\t\tthis.setState({ searchSong1Result: searchResult })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchSong2Result: searchResult })\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'un artiste par son nom\n\tgetArtistByName(name, artistId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/api/v1/artist_all/name/${encodeURI(name)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request, {\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(artistId === \"artist1\") {\n\t\t\t\t\tthis.setState({ artist1Data: data })\n\t\t\t\t\tif(this.state.artist2Data)\n\t\t\t\t\t\tthis.getCompareArtistsData()\n\t\t\t\t} else if(artistId === \"artist2\") {\n\t\t\t\t\tthis.setState({ artist2Data: data })\n\t\t\t\t\tif(this.state.artist1Data)\n\t\t\t\t\t\tthis.getCompareArtistsData()\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({ artistData: data })\n\t\t\t\t\tthis.getArtistChartData(data)\n\t\t\t\t}\n\t\t\t})\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////  HANDLERS  ///////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\thandleListItemSelect(e, i) {\n\t\tthis.setState({ drawerSelectedIndex: i })\n\t\tswitch(i) {\n\t\t\tcase 0:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: true,\n\t\t\t\t\tlanguagePopularityShow: false,\n\t\t\t\t\tcountryPopularityShow: false,\n\t\t\t\t\tartistShow: false,\n\t\t\t\t\tcompareArtistsShow: false,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 1:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: false,\n\t\t\t\t\tlanguagePopularityShow: true,\n\t\t\t\t\tcountryPopularityShow: false,\n\t\t\t\t\tartistShow: false,\n\t\t\t\t\tcompareArtistsShow: false,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: false,\n\t\t\t\t\tlanguagePopularityShow: false,\n\t\t\t\t\tcountryPopularityShow: true,\n\t\t\t\t\tartistShow: false,\n\t\t\t\t\tcompareArtistsShow: false,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 3:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: false,\n\t\t\t\t\tlanguagePopularityShow: false,\n\t\t\t\t\tcountryPopularityShow: false,\n\t\t\t\t\tartistShow: true,\n\t\t\t\t\tcompareArtistsShow: false,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 4:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: false,\n\t\t\t\t\tlanguagePopularityShow: false,\n\t\t\t\t\tcountryPopularityShow: false,\n\t\t\t\t\tartistShow: false,\n\t\t\t\t\tcompareArtistsShow: true,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\t// Handler de la recherche d'artiste ou chanson (TextField onChange)\n\tsearchAll(e) {\n\t\tconst value = e.target.value.trim()\n\t\tthis.setState({ searchAllInput: value })\n\t\tif(value)\n\t\t\tthis.getArtistOrSongBySearch(value)\n\t\telse\n\t\t\tthis.setState({ searchAllResult: null })\n\t}\n\n\t// Handler de la recherche d'artiste (TextField onChange)\n\tsearchArtist(e, artistId) {\n\t\tconst value = e.target.value.trim()\n\t\tif(artistId === \"artist1\")\n\t\t\tthis.setState({ searchArtist1Input: value })\n\t\telse if(artistId === \"artist2\")\n\t\t\tthis.setState({ searchArtist2Input: value })\n\t\telse\n\t\t\tthis.setState({ searchArtistInput: value })\n\t\tif(value)\n\t\t\tthis.getArtistBySearch(value, artistId)\n\t\telse {\n\t\t\tif(artistId === \"artist1\")\n\t\t\t\tthis.setState({ searchArtist1Result: [] })\n\t\t\telse if(artistId === \"artist2\")\n\t\t\t\tthis.setState({ searchArtist2Result: [] })\n\t\t\telse\n\t\t\t\tthis.setState({ searchArtistResult: [] })\n\t\t}\n\t}\n\n\t// Handler de la recherche de chanson (TextField onChange)\n\tsearchSong(e, songId) {\n\t\tconst value = e.target.value.trim()\n\t\tif(songId === \"song1\")\n\t\t\tthis.setState({ searchSong1Input: value })\n\t\telse\n\t\t\tthis.setState({ searchSong2Input: value })\n\t\tif(value)\n\t\t\tthis.getSongBySearch(value, songId)\n\t\telse {\n\t\t\tif(songId === \"song1\")\n\t\t\t\tthis.setState({ searchSong1Result: [] })\n\t\t\telse\n\t\t\t\tthis.setState({ searchSong2Result: [] })\n\t\t}\n\t}\n\n\t// Handler de la sélection d'un élément suggéré\n\thandleSearchOptionSelection(e, field, type) {\n\t\tconst selection = e.target.textContent\n\t\tif(selection) {\n\t\t\tif(!type) {\n\t\t\t\tlet split = selection.split(\"(\")\n\t\t\t\tlet value = split[0].trim()\n\t\t\t\tthis.setState({ searchAllSelection: value })\n\t\t\t\tif(split[1] === \"artiste)\") {\n\t\t\t\t\tconsole.log(\"You've searched an artist: \" + value)\n\t\t\t\t\tthis.getArtistByName(value)\n\t\t\t\t} else\n\t\t\t\t\tconsole.log(\"You've searched a song: \" + value)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tswitch(field) {\n\t\t\t\t\tcase \"artist\":\n\t\t\t\t\t\tthis.setState({ searchArtistSelection: selection })\n\t\t\t\t\t\tthis.getArtistByName(selection)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"artist1\":\n\t\t\t\t\t\tthis.setState({ searchArtist1Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"artist2\":\n\t\t\t\t\t\tthis.setState({ searchArtist2Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"song1\":\n\t\t\t\t\t\tthis.setState({ searchSong1Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"song2\":\n\t\t\t\t\t\tthis.setState({ searchSong2Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tif(type === \"artist\")\n\t\t\t\t\tconsole.log(\"You've searched an artist: \" + selection)\n\t\t\t\telse if(type === \"song\")\n\t\t\t\t\tconsole.log(\"You've searched a song: \" + selection)\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(\"clear \" + field)\n\t\t\tthis.clearProps(field)\n\t\t}\n\t}\n\n\thandleGetArtistDataButtonClick(e) {\n\t\tthis.getArtistByName(this.state.searchArtistSelection)\n\t}\n\n\t// Handler\n\thandleCompareButtonClick(e, type) {\n\t\tif(type === \"artist\") {\n\t\t\tlet artist1 = this.state.searchArtist1Selection\n\t\t\tlet artist2 = this.state.searchArtist2Selection\n\t\t\tif(artist1 && artist2) {\n\t\t\t\tif(artist1 === artist2) {\n\t\t\t\t\tconsole.log(\"you want to compare the same artists\")\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.getArtistByName(artist1, \"artist1\")\n\t\t\t\t\tthis.getArtistByName(artist2, \"artist2\")\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"missing 1 artist at least\")\n\t\t\t}\n\t\t} \n\t\telse {\n\t\t\tlet song1 = this.state.searchSong1Selection\n\t\t\tlet song2 = this.state.searchSong2Selection\n\t\t\tif(song1 && song2) {\n\t\t\t\tif(song1 === song2) {\n\t\t\t\t\tconsole.log(\"you want to compare the same songs\")\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//this.getSongByName(song1)\n\t\t\t\t\t//this.getSongByName(song2)\n\t\t\t\t\tconsole.log(\"TODO\")\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"missing 1 song at least\")\n\t\t\t}\n\t\t}\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////  DATA  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\t// Supprime les données correspondant à l'id donné\n\tclearProps(id) {\n\t\tswitch(id) {\n\t\t\tcase \"artist\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtistInput: null,\n\t\t\t\t\tsearchArtistResult: [],\n\t\t\t\t\tsearchArtistSelection: null,\n\t\t\t\t\tartistData: null,\n\t\t\t\t\tartistAlbumsPerYear: null,\n\t\t\t\t\tartistSongsPerYear: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"artist1\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtist1Input: null,\n\t\t\t\t\tsearchArtist1Result: [],\n\t\t\t\t\tsearchArtist1Selection: null,\n\t\t\t\t\tartist1Data: null,\n\t\t\t\t\tcompareArtistsData: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"artist2\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtist2Input: null,\n\t\t\t\t\tsearchArtist2Result: [],\n\t\t\t\t\tsearchArtist2Selection: null,\n\t\t\t\t\tartist2Data: null,\n\t\t\t\t\tcompareArtistsData: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"song1\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchSong1Input: null,\n\t\t\t\t\tsearchSong1Result: [],\n\t\t\t\t\tsearchSong1Selection: null,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"song2\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchSong2Input: null,\n\t\t\t\t\tsearchSong2Result: [],\n\t\t\t\t\tsearchSong2Selection: null,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"all\":\n\t\t\tdefault:\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchAllInput: null,\n\t\t\t\t\tsearchAllResult: [],\n\t\t\t\t\tsearchAllSelection: null\n\t\t\t\t})\n\t\t}\n\t}\n\n\tgetGenrePopularityData(rawData) {\n\t\tlet chartData = [[\"Genre\", \"Nombre de chansons\"]]\n\t\tfor(let i=0; i<rawData.length; i++){\n\t\t\tchartData.push([\n\t\t\t\trawData[i]._id,\n\t\t\t\trawData[i].sum\n\t\t\t])\n\t\t}\n\t\tthis.setState({ topGenre: chartData })\n\t}\n\n\tgetLanguagePopularityData(rawData) {\n\t\tlet chartData = [[\"Langue\", \"Nombre de chansons\"]]\n\t\tfor(let i=0; i<10; i++){\n\t\t\tlet language = rawData[i]._id\n\t\t\tchartData.push([\n\t\t\t\tlanguage.charAt(0).toUpperCase() + language.substring(1),\n\t\t\t\trawData[i].sum\n\t\t\t])\n\t\t}\n\t\tthis.setState({ topLanguage: chartData })\n\t}\n\n\tgetCountryPopularityData(rawData) {\n\t\tlet chartData = [[\"Pays\", \"Nombre de chansons\"]]\n\t\tlet top10ChartData = [[\"Pays\", \"Nombre de chansons\"]]\n\t\tfor(let i=0; i<rawData.length; i++){\n\t\t\tchartData.push([\n\t\t\t\trawData[i]._id,\n\t\t\t\trawData[i].sum\n\t\t\t])\n\t\t\tif(i<10)\n\t\t\t\ttop10ChartData.push([\n\t\t\t\t\trawData[i]._id,\n\t\t\t\t\trawData[i].sum\n\t\t\t\t])\n\t\t}\n\t\tthis.setState({ \n\t\t\ttopCountry: chartData,\n\t\t\ttop10Country: top10ChartData\n\t\t})\n\t}\n\n\tgetArtistChartData(rawData) {\n\t\tlet albumPublicationYear = {}\n\t\tlet songPublicationYears = {}\n\t\tconst albumList = rawData.albums\n\t\tfor(let i=0; i<albumList.length; i++){\n\t\t\tlet albumYear = albumList[i].publicationDate\n\t\t\tif(albumPublicationYear[albumYear])\n\t\t\t\talbumPublicationYear[albumYear]++\n\t\t\telse\n\t\t\t\talbumPublicationYear[albumYear] = 1\n\t\t\tlet songList = albumList[i].songs\n\t\t\tfor(let j=0; j<songList.length; j++){\n\t\t\t\tlet songYear = songList[j].publicationDate.split('-')[0]\n\t\t\t\tif(songPublicationYears[songYear]) \n\t\t\t\t\tsongPublicationYears[songYear]++\n\t\t\t\telse\n\t\t\t\t\tsongPublicationYears[songYear] = 1\n\t\t\t}\n\t\t}\n\t\tlet albumsPerYearData = [[\"Année\", \"Nombre d'albums\"]]\n\t\tconst albumYears = Object.keys(albumPublicationYear)\n\t\tfor(let i=0; i<albumYears.length; i++){\n\t\t\tlet year = albumYears[i]\n\t\t\tif(year && year!==\"0000\")\n\t\t\t\talbumsPerYearData.push([parseInt(year), albumPublicationYear[year]])\n\t\t}\n\t\tlet songsPerYearData = [[\"Année\", \"Nombre de chansons\"]]\n\t\tconst songYears = Object.keys(songPublicationYears)\n\t\tfor(let i=0; i<songYears.length; i++){\n\t\t\tlet year = songYears[i]\n\t\t\tif(year && year!==\"0000\")\n\t\t\t\tsongsPerYearData.push([parseInt(year), songPublicationYears[year]])\n\t\t}\n\t\tthis.setState({ \n\t\t\tartistAlbumsPerYear: albumsPerYearData,\n\t\t\tartistSongsPerYear: songsPerYearData\n\t\t})\n\t}\n\n\tgetCompareArtistsData() {\n\t\tconst artist1 = this.state.artist1Data\n\t\tconst artist2 = this.state.artist2Data\n\t\tif(artist1 && artist2) {\n\t\t\tlet chartData = [\n\t\t\t\t[\n\t\t\t\t\t\"Champs\", \n\t\t\t\t\tthis.state.searchArtist1Selection, \n\t\t\t\t\tthis.state.searchArtist2Selection\n\t\t\t\t],[\n\t\t\t\t\t\"Age / durée de vie\",\n\t\t\t\t\tthis.calculAge(artist1),\n\t\t\t\t\tthis.calculAge(artist2)\n\t\t\t\t],[\n\t\t\t\t\t\"Albums\",\n\t\t\t\t\tthis.countAlbums(artist1.albums),\n\t\t\t\t\tthis.countAlbums(artist2.albums)\n\t\t\t\t],[\n\t\t\t\t\t\"Chansons\",\n\t\t\t\t\tthis.countSongs(artist1.albums),\n\t\t\t\t\tthis.countSongs(artist2.albums)\n\t\t\t\t]\n\t\t\t]\n\t\t\tthis.setState({ compareArtistsData: chartData })\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"missing artist data\")\n\t\t}\n\t}\n\n\tcalculAge(artist) {\n\t\tlet beginYear = artist.lifeSpan.begin.split(\"-\")[0]\n\t\tif(artist.lifeSpan.ended) {\n\t\t\tlet endYear = artist.lifeSpan.end.split(\"-\")[0]\n\t\t\treturn parseInt(endYear) - parseInt(beginYear)\n\t\t}\n\t\treturn 2020 - parseInt(beginYear)\n\t}\n\n\tcountAlbums(albumList) {\n\t\tlet albums = 0\n\t\tfor(let i=0; i<albumList.length; i++){\n\t\t\tif(albumList[i].publicationDate){\n\t\t\t\talbums++\n\t\t\t}\n\t\t}\n\t\treturn albums\n\t}\n\n\tcountSongs(albumList) {\n\t\tlet songsInEachAlbum = albumList.map(x => x.songs.length)\n\t\tlet songs = 0\n\t\tfor(let i=0; i<songsInEachAlbum.length; i++)\n\t\t\tsongs += songsInEachAlbum[i]\n\t\treturn songs\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////  AFFICHAGE  //////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\t// Gère l'affichage d'un élément suggéré (en paramètre)\n\tsearchOptionRendering(option, type) {\n\t\tif(type === \"artist\")\n\t\t\treturn option.name\n\t\tif(option.title)\n\t\t\treturn `${option.title} (chanson de ${option.name} de l'album ${option.albumTitle})`\n\t\telse\n\t\t\treturn `${option.name} (artiste)`\n\t}\n\n\tgetStateButtonDisplay() {\n\t\tif(this.state.testing)\n\t\t\treturn <Button \n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tonClick={ this.getState.bind(this) }>\n\t\t\t\t\t\t\tGet state\n\t\t\t\t\t</Button>\n\t}\n\n\ttopGenreChart() {\n\t\tif(this.state.genrePopularityShow) {\n\t\t\tif(!this.state.topGenre)\n\t\t\t\tthis.getGenrePopularity(10)\n\t\t\treturn <div>\n\t\t\t\t\t\t<h3>Popularité des genres musicaux</h3>\n\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\tid=\"topGenre\"\n\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\tdata={this.state.topGenre}\n\t\t\t\t\t\t\twidth={1000}\n\t\t\t\t\t\t\theight={700}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t//chartArea: {width: '50%'},\n\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons',\n\t\t\t\t\t\t\t\t\tformat: '#'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\ttitle: 'Genres'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}} />\n\t\t\t\t\t</div>\n\t\t}\n\t}\n\n\ttopLanguageChart() {\n\t\tif(this.state.languagePopularityShow) {\n\t\t\tif(!this.state.topLanguage)\n\t\t\t\tthis.getLanguagePopularity()\n\t\t\treturn <div>\n\t\t\t\t\t\t<h3>Popularité des langues</h3>\n\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\tid=\"topLanguage\"\n\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\tdata={this.state.topLanguage}\n\t\t\t\t\t\t\twidth={1000}\n\t\t\t\t\t\t\theight={700}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons',\n\t\t\t\t\t\t\t\t\tformat: '#'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\ttitle: 'Langues'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}} />\n\t\t\t\t\t</div>\n\t\t}\n\t}\n\n\ttopCountryChart() {\n\t\tif(this.state.countryPopularityShow) {\n\t\t\tif(!this.state.topCountry)\n\t\t\t\tthis.getCountryPopularity()\n\t\t\treturn <div>\n\t\t\t\t\t\t<h3>Popularité des pays</h3>\n\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\tid=\"topCountry\"\n\t\t\t\t\t\t\tchartType=\"GeoChart\"\n\t\t\t\t\t\t\tdata={this.state.topCountry}\n\t\t\t\t\t\t\twidth={1000}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons',\n\t\t\t\t\t\t\t\t\tformat: '#'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvAxis: { title: 'Pays' },\n\t\t\t\t\t\t\t\tlegend: { position: 'none' }, \n\t\t\t\t\t\t\t\tsizeAxis: { minValue: 0 }\n\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\tid=\"topCountry\"\n\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\tdata={this.state.top10Country}\n\t\t\t\t\t\t\twidth={1000}\n\t\t\t\t\t\t\theight={700}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\ttitle: 'Top 10 des pays qui produisent le plus de musique',\n\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons',\n\t\t\t\t\t\t\t\t\tformat: '#'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\ttitle: 'Pays'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}} />\n\t\t\t\t\t</div>\n\t\t}\n\t}\n\n\t/*searchAllDisplay() {\n\t\tif(this.state.searchAllShow) {\n\t\t\treturn <div>\n\t\t\t\t\t\t<h3>Chercher un artiste ou une chanson</h3>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\toptions={ this.state.searchAllResult.map(option => this.searchOptionRendering(option)) }\n\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e) }\n\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid=\"searchAllTextField\"\n\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\tlabel=\"Recherche\"\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tonChange={ e => this.searchAll(e) }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t}\n\t}*/\n\n\tsearchArtistDisplay() {\n\t\tif(this.state.artistShow) {\n\t\t\tif(!this.state.artistData){\n\t\t\t\treturn <div>\n\t\t\t\t\t\t\t<h3>Chercher un artiste</h3>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\t\toptions={ this.state.searchArtistResult.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist\", \"artist\") }\n\t\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\tid=\"searchAllTextField\"\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\t\tlabel=\"Artiste\"\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist\") }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn <div>\n\t\t\t\t\t\t\t<h3>{this.state.artistData.name}</h3>\n\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\tchartType=\"ColumnChart\"\n\t\t\t\t\t\t\t\tdata={this.state.artistSongsPerYear}\n\t\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons par année',\n\t\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: 'Années',\n\t\t\t\t\t\t\t\t\t\tformat: '#',\n\t\t\t\t\t\t\t\t\t\tmaxValue: 2020\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons',\n\t\t\t\t\t\t\t\t\t\tformat: '#',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\tchartType=\"ColumnChart\"\n\t\t\t\t\t\t\t\tdata={this.state.artistAlbumsPerYear}\n\t\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\ttitle: \"Nombre d'albums par année\",\n\t\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: 'Années',\n\t\t\t\t\t\t\t\t\t\tformat: '#',\n\t\t\t\t\t\t\t\t\t\tmaxValue: 2020\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: \"Nombre d'albums\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\tvariant=\"outlined\" \n\t\t\t\t\t\t\t\tstyle={{ marginTop: 50 }}\n\t\t\t\t\t\t\t\tonClick={ e => this.clearProps(\"artist\") }>\n\t\t\t\t\t\t\t\tChercher un autre artiste\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t}\n\t}\n\n\tcompareArtistsDisplay() {\n\t\tif(this.state.compareArtistsShow) {\n\t\t\tconst data = this.state.compareArtistsData\n\t\t\tif(!data) {\n\t\t\t\treturn <div>\n\t\t\t\t\t\t\t<h3>Comparer deux artistes</h3>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\t\toptions={ this.state.searchArtist1Result.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist1\", \"artist\") }\n\t\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\tid=\"searchArtist1TextField\"\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\t\tlabel=\"Artiste #1\"\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist1\") }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\t\toptions={ this.state.searchArtist2Result.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist2\", \"artist\") }\n\t\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\tid=\"searchArtist2TextField\"\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\t\tlabel=\"Artiste #2\"\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist2\") }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleCompareButtonClick(e, \"artist\") }>Comparer</Button>\n\t\t\t\t\t\t</div>\n\t\t\t} \n\t\t\telse {\n\t\t\t\treturn <div>\n\t\t\t\t\t\t\t<h3>{this.state.artist1Data.name} vs {this.state.artist2Data.name}</h3>\n\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\t\tid=\"compareArtistsChart\"\n\t\t\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\t\ttitle: 'Comparaison entre deux artistes'\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\tvariant=\"outlined\" \n\t\t\t\t\t\t\t\tstyle={{ marginTop: 50 }}\n\t\t\t\t\t\t\t\tonClick={ e => {\n\t\t\t\t\t\t\t\t\tthis.clearProps(\"artist1\")\n\t\t\t\t\t\t\t\t\tthis.clearProps(\"artist2\")\n\t\t\t\t\t\t\t\t} }>\n\t\t\t\t\t\t\t\tFaire une autre comparaison\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\t/*compareSongsDisplay() {\n\t\tif(this.state.compareSongsShow) {\n\t\t\treturn <div>\n\t\t\t\t\t\t<h3>Comparer deux chansons</h3>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\toptions={ this.state.searchSong1Result.map(option => this.searchOptionRendering(option, \"song\")) }\n\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song1\", \"song\") }\n\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid=\"searchSong1TextField\"\n\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\tlabel=\"Chanson #1\"\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song1\") }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\toptions={ this.state.searchSong2Result.map(option => this.searchOptionRendering(option, \"song\")) }\n\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song2\", \"song\") }\n\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid=\"searchSong2TextField\"\n\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\tlabel=\"Chanson #2\"\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song2\") }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleCompareButtonClick(e, \"song\") }>Comparer</Button>\n\t\t\t\t\t</div>\n\t\t}\n\t}*/\n\n//////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  RENDER  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\trender() {\n\t\tconst { classes } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"App\" style={{ height : '500px' }}>\n\t\t\t\t\n\t\t\t\t<AppBar  position=\"fixed\" className={classes.appBar}>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography variant=\"h6\" noWrap>\n\t\t\t\t\t\t\tIBASAW\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t{this.getStateButtonDisplay()}\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\n\t\t\t\t<Drawer variant=\"permanent\" className={classes.drawer}>\n\t\t\t\t\t<div className={classes.toolbarSpacer} />\n\t\t\t\t\t<List>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 0 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 0) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Popularité des genres\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 1 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 1) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Popularité des langues\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 2 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 2) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Popularité des pays\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<Divider />\n\t\t\t\t\t\t<ListItem \n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 3 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 3) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Chercher un artiste\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<ListItem \n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 4 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 4) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Comparer deux artistes\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t</List>\n\t\t\t\t</Drawer>\n\n\t\t\t\t<div className={classes.main}>\n\t\t\t\t\t<div className={classes.toolbarSpacer} />\n\n\t\t\t\t\t{this.topGenreChart()}\n\t\t\t\t\t{this.topLanguageChart()}\n\t\t\t\t\t{this.topCountryChart()}\n\t\t\t\t\t{this.searchArtistDisplay()}\n\t\t\t\t\t{this.compareArtistsDisplay()}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default withStyles(styles)(App)"]},"metadata":{},"sourceType":"module"}