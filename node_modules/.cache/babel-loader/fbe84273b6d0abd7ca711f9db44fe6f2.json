{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport var styles = nativeSelectStyles;\n\nvar _ref = React.createElement(Input, null);\n\nvar _ref2 = React.createElement(FilledInput, null);\n\nvar Select = React.forwardRef(function Select(props, ref) {\n  var _props$autoWidth = props.autoWidth,\n      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,\n      children = props.children,\n      classes = props.classes,\n      _props$displayEmpty = props.displayEmpty,\n      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      input = props.input,\n      inputProps = props.inputProps,\n      MenuProps = props.MenuProps,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$native = props.native,\n      native = _props$native === void 0 ? false : _props$native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      _props$variant = props.variant,\n      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,\n      _props$labelWidth = props.labelWidth,\n      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"input\", \"inputProps\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\", \"labelWidth\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  var variant = fcs.variant || variantProps;\n  var InputComponent = input || {\n    standard: _ref,\n    outlined: React.createElement(OutlinedInput, {\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    select: true,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {} : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: SelectDisplayProps\n    }, {}, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * The label width to be used on OutlinedInput.\n   * This prop is required when the `variant` prop is `outlined`.\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {*} value The `value` provided to the component.\n   * @returns {ReactElement}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);","map":{"version":3,"sources":["/Users/robina/Documents/MIAGE/React/bd-musique/node_modules/@material-ui/core/esm/Select/Select.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","mergeClasses","SelectInput","formControlState","useFormControl","withStyles","ArrowDropDownIcon","Input","styles","nativeSelectStyles","NativeSelectInput","FilledInput","OutlinedInput","_ref","createElement","_ref2","Select","forwardRef","props","ref","_props$autoWidth","autoWidth","children","classes","_props$displayEmpty","displayEmpty","_props$IconComponent","IconComponent","input","inputProps","MenuProps","_props$multiple","multiple","_props$native","native","onClose","onOpen","open","renderValue","SelectDisplayProps","_props$variant","variant","variantProps","_props$labelWidth","labelWidth","other","inputComponent","muiFormControl","fcs","states","InputComponent","standard","outlined","filled","cloneElement","select","type","undefined","baseClasses","newClasses","Component","process","env","NODE_ENV","propTypes","bool","node","object","isRequired","elementType","element","number","onChange","func","value","any","oneOf","muiName","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport var styles = nativeSelectStyles;\n\nvar _ref = React.createElement(Input, null);\n\nvar _ref2 = React.createElement(FilledInput, null);\n\nvar Select = React.forwardRef(function Select(props, ref) {\n  var _props$autoWidth = props.autoWidth,\n      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,\n      children = props.children,\n      classes = props.classes,\n      _props$displayEmpty = props.displayEmpty,\n      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      input = props.input,\n      inputProps = props.inputProps,\n      MenuProps = props.MenuProps,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$native = props.native,\n      native = _props$native === void 0 ? false : _props$native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      _props$variant = props.variant,\n      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,\n      _props$labelWidth = props.labelWidth,\n      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"input\", \"inputProps\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\", \"labelWidth\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  var variant = fcs.variant || variantProps;\n  var InputComponent = input || {\n    standard: _ref,\n    outlined: React.createElement(OutlinedInput, {\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    select: true,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {} : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: SelectDisplayProps\n    }, {}, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * The label width to be used on OutlinedInput.\n   * This prop is required when the `variant` prop is `outlined`.\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {*} value The `value` provided to the component.\n   * @returns {ReactElement}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);"]},"metadata":{},"sourceType":"module"}