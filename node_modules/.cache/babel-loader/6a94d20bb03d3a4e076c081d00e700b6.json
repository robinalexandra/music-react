{"ast":null,"code":"var _jsxFileName = \"/Users/robina/Documents/MIAGE/React/bd-musique/src/App.js\";\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Button, AppBar, Toolbar, Typography } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab'; //import { ResponsiveBar } from '@nivo/bar'\n//import { ResponsiveBubble } from '@nivo/circle-packing'\n\nimport { Chart } from \"react-google-charts\";\nimport './App.css'; //////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  STYLES  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nconst styles = theme => ({\n  title: {},\n  button: {\n    margin: 50\n  }\n}); //////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////  APP  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topGenre: null,\n      searchAllInput: null,\n      searchAllResult: [],\n      searchAllSelection: null,\n      searchArtist1Input: \"\",\n      searchArtist1Result: [],\n      searchArtist1Selection: null,\n      artist1Data: null,\n      searchArtist2Input: \"\",\n      searchArtist2Result: [],\n      searchArtist2Selection: null,\n      artist2Data: null,\n      artistsToCompare: 0,\n      compareArtistsData: null,\n      searchSong1Input: \"\",\n      searchSong1Result: [],\n      searchSong1Selection: null,\n      searchSong2Input: \"\",\n      searchSong2Result: [],\n      searchSong2Selection: null\n    };\n  } /////////////////////////////////////////\n\n\n  componentDidMount() {\n    this.getGenrePopularity(10);\n  }\n\n  searchArtistData() {\n    const searchedArtist = this.input.value.trim();\n    this.setState({\n      artist: searchedArtist\n    });\n    const request = `https://wasabi.i3s.unice.fr/api/v1/artist/name/${encodeURI(searchedArtist)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data != null) this.setState({\n        artistData: data\n      });else this.setState({\n        artistData: {}\n      }); //console.log(this.state.artistData)\n    });\n  }\n\n  getState() {\n    console.log(this.state);\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  REQUESTS  ///////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  getGenrePopularity(limit) {\n    let request = `https://wasabi.i3s.unice.fr/api/v1/artist/genres/popularity`;\n    if (limit) request += `?limit=${limit}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data == null) this.setState({\n        topGenre: null\n      });else {\n        let top = [[]];\n        this.setState({\n          topGenre: data\n        });\n      }\n      console.log(this.state.topGenre);\n    });\n    /*const chartData = this.state.topGenres\n    const bubbles = {\n    \t_id: \"Genres\",\n    \tchildren: this.state.topGenres\n    }*/\n  } // Requête : recherche d'artistes et chansons\n\n\n  getArtistOrSongBySearch(search) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data != null) this.setState({\n        searchAllResult: data\n      });else this.setState({\n        searchAllResult: null\n      });\n    });\n  } // Requête : recherche d'artistes\n\n\n  getArtistBySearch(search, artistId) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      let searchResult;\n      if (data != null) searchResult = data.filter(option => !option.title);else searchResult = [];\n      if (artistId === \"artist1\") this.setState({\n        searchArtist1Result: searchResult\n      });else this.setState({\n        searchArtist2Result: searchResult\n      });\n    });\n  } // Requête : recherche de chansons\n\n\n  getSongBySearch(search, songId) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      let searchResult;\n      if (data != null) searchResult = data.filter(option => option.title);else searchResult = [];\n      if (songId === \"song1\") this.setState({\n        searchSong1Result: searchResult\n      });else this.setState({\n        searchSong2Result: searchResult\n      });\n    });\n  } // Requête : recherche d'un artiste par son nom\n\n\n  getArtistByName(name, artistId) {\n    const request = `https://wasabi.i3s.unice.fr/api/v1/artist_all/name/${encodeURI(name)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (artistId === \"artist1\") this.setState({\n        artist1Data: data\n      });else if (artistId === \"artist2\") this.setState({\n        artist2Data: data\n      }); //let artistsWithData = this.state.artistsToCompare\n      //console.log(\"artistsToCompare: \" + artistsWithData)\n\n      this.setState({\n        artistsToCompare: this.state.artistsToCompare + 1\n      });\n      if (this.state.artistsToCompare === 2) this.getCompareArtistsData();\n    });\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  HANDLERS  ///////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n  // Handler de la recherche d'artiste ou chanson (TextField onChange)\n\n\n  searchAll(e) {\n    const value = e.target.value.trim();\n    this.setState({\n      searchAllInput: value\n    });\n    if (value) this.getArtistOrSongBySearch(value);else this.setState({\n      searchAllResult: null\n    });\n  } // Handler de la recherche d'artiste (TextField onChange)\n\n\n  searchArtist(e, artistId) {\n    const value = e.target.value.trim();\n    if (artistId === \"artist1\") this.setState({\n      searchArtist1Input: value\n    });else this.setState({\n      searchArtist2Input: value\n    });\n    if (value) this.getArtistBySearch(value, artistId);else {\n      if (artistId === \"artist1\") this.setState({\n        searchArtist1Result: []\n      });else this.setState({\n        searchArtist2Result: []\n      });\n    }\n  } // Handler de la recherche de chanson (TextField onChange)\n\n\n  searchSong(e, songId) {\n    const value = e.target.value.trim();\n    if (songId === \"song1\") this.setState({\n      searchSong1Input: value\n    });else this.setState({\n      searchSong2Input: value\n    });\n    if (value) this.getSongBySearch(value, songId);else {\n      if (songId === \"song1\") this.setState({\n        searchSong1Result: []\n      });else this.setState({\n        searchSong2Result: []\n      });\n    }\n  } // Handler de la sélection d'un élément suggéré\n\n\n  handleSearchOptionSelection(e, field, type) {\n    //console.log(e.target)\n    const selection = e.target.textContent; //console.log(selection)\n\n    if (selection) {\n      if (!type) {\n        let split = selection.split(\"(\");\n        let value = split[0].trim();\n        this.setState({\n          searchAllSelection: value\n        });\n        if (split[1] === \"artiste)\") console.log(\"You've searched an artist: \" + value);else console.log(\"You've searched a song: \" + value);\n      } else {\n        let value = e.target.textContent;\n\n        switch (field) {\n          case \"artist1\":\n            this.setState({\n              searchArtist1Selection: value\n            });\n            break;\n\n          case \"artist2\":\n            this.setState({\n              searchArtist2Selection: value\n            });\n            break;\n\n          case \"song1\":\n            this.setState({\n              searchSong1Selection: value\n            });\n            break;\n\n          case \"song2\":\n            this.setState({\n              searchSong2Selection: value\n            });\n            break;\n\n          default:\n        }\n\n        if (type === \"artist\") console.log(\"You've searched an artist: \" + value);else if (type === \"song\") console.log(\"You've searched a song: \" + value);\n      }\n    } else {\n      this.clearProps(field);\n    }\n  } // Handler\n\n\n  handleCompareButtonClick(e, type) {\n    if (type === \"artist\") {\n      let artist1 = this.state.searchArtist1Selection;\n      let artist2 = this.state.searchArtist2Selection;\n\n      if (artist1 && artist2) {\n        if (artist1 === artist2) {\n          console.log(\"you want to compare the same artists\");\n        } else {\n          this.getArtistByName(artist1, \"artist1\");\n          this.getArtistByName(artist2, \"artist2\");\n        }\n      } else {\n        console.log(\"missing 1 artist at least\");\n      }\n    } else {\n      let song1 = this.state.searchSong1Selection;\n      let song2 = this.state.searchSong2Selection;\n\n      if (song1 && song2) {\n        if (song1 === song2) {\n          console.log(\"you want to compare the same songs\");\n        } else {\n          //this.getSongByName(song1)\n          //this.getSongByName(song2)\n          console.log(\"TODO\");\n        }\n      } else {\n        console.log(\"missing 1 song at least\");\n      }\n    }\n  } //////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////  TRI  /////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  getCompareArtistsData() {\n    const artist1 = this.state.artist1Data;\n    const artist2 = this.state.artist2Data;\n\n    if (artist1 && artist2) {\n      let chartData = [[\"Champs\", this.state.searchArtist1Selection, this.state.searchArtist2Selection], [\"Albums\", artist1.albums.length, artist2.albums.length], [\"Chansons\", this.countSongs(artist1.albums), this.countSongs(artist2.albums)]];\n      this.setState({\n        compareArtistsData: chartData\n      });\n    } else {\n      console.log(\"missing artist data\");\n    }\n  }\n\n  countSongs(albumList) {\n    let songsInEachAlbum = albumList.map(x => x.songs.length);\n    let songs = 0;\n\n    for (let i = 0; i < songsInEachAlbum.length; i++) songs += songsInEachAlbum[i];\n\n    return songs;\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  AFFICHAGE  //////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n  // Gère l'affichage d'un élément suggéré (en paramètre)\n\n\n  searchOptionRendering(option, type) {\n    if (type === \"artist\") return option.name;\n    if (option.title) return `${option.title} (chanson de ${option.name} de l'album ${option.albumTitle})`;else return `${option.name} (artiste)`;\n  }\n\n  topGenreChart() {\n    if (this.topGenre) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        id: \"topGenre\",\n        chartType: \"BarChart\",\n        data: this.state.topGenre,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }));\n    }\n  }\n\n  compareArtistsChart() {\n    if (this.state.compareArtistsData) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        id: \"compareArtistsChart\",\n        chartType: \"BarChart\",\n        data: this.state.compareArtistsData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }));\n    }\n  }\n\n  clearProps(id) {\n    let artistsWithData;\n\n    switch (id) {\n      case \"artist1\":\n        artistsWithData = this.state.artistsToCompare;\n        this.setState({\n          searchArtist1Input: null,\n          searchArtist1Result: [],\n          searchArtist1Selection: null,\n          artist1Data: null,\n          artistsToCompare: artistsWithData - 1,\n          compareArtistsData: null\n        });\n        break;\n\n      case \"artist2\":\n        artistsWithData = this.state.artistsToCompare;\n        this.setState({\n          searchArtist2Input: null,\n          searchArtist2Result: [],\n          searchArtist2Selection: null,\n          artist2Data: null,\n          artistsToCompare: artistsWithData - 1,\n          compareArtistsData: null\n        });\n        break;\n\n      case \"song1\":\n        this.setState({\n          searchSong1Input: null,\n          searchSong1Result: [],\n          searchSong1Selection: null\n        });\n        break;\n\n      case \"song2\":\n        this.setState({\n          searchSong2Input: null,\n          searchSong2Result: [],\n          searchSong2Selection: null\n        });\n        break;\n\n      case \"all\":\n      default:\n        this.setState({\n          searchAllInput: null,\n          searchAllResult: [],\n          searchAllSelection: null\n        });\n    }\n  } //////////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////  RENDER  ////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        height: '500px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(AppBar, {\n      position: \"static\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.title,\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, \"Material-UI\"))), React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: this.getState.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, \"Get state\"), this.topGenreChart(), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, \"Chercher un artiste ou une chanson\"), React.createElement(Autocomplete, {\n      freeSolo: true,\n      options: this.state.searchAllResult.map(option => this.searchOptionRendering(option)),\n      filterOptions: options => {\n        return options;\n      },\n      onChange: e => this.handleSearchOptionSelection(e),\n      renderInput: params => React.createElement(TextField, Object.assign({\n        id: \"searchAllTextField\"\n      }, params, {\n        inputRef: input => this.input = input,\n        style: {\n          width: '300px'\n        },\n        label: \"Recherche\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: e => this.searchAll(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, \"Comparer deux artistes\"), React.createElement(Autocomplete, {\n      freeSolo: true,\n      options: this.state.searchArtist1Result.map(option => this.searchOptionRendering(option, \"artist\")),\n      filterOptions: options => {\n        return options;\n      },\n      onChange: e => this.handleSearchOptionSelection(e, \"artist1\", \"artist\"),\n      renderInput: params => React.createElement(TextField, Object.assign({\n        id: \"searchArtist1TextField\"\n      }, params, {\n        inputRef: input => this.input = input,\n        style: {\n          width: '300px'\n        },\n        label: \"Artiste #1\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: e => this.searchArtist(e, \"artist1\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      freeSolo: true,\n      options: this.state.searchArtist2Result.map(option => this.searchOptionRendering(option, \"artist\")),\n      filterOptions: options => {\n        return options;\n      },\n      onChange: e => this.handleSearchOptionSelection(e, \"artist2\", \"artist\"),\n      renderInput: params => React.createElement(TextField, Object.assign({\n        id: \"searchArtist2TextField\"\n      }, params, {\n        inputRef: input => this.input = input,\n        style: {\n          width: '300px'\n        },\n        label: \"Artiste #2\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: e => this.searchArtist(e, \"artist2\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: e => this.handleCompareButtonClick(e, \"artist\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"Comparer\")), this.compareArtistsChart(), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"Comparer deux chansons\"), React.createElement(Autocomplete, {\n      freeSolo: true,\n      options: this.state.searchSong1Result.map(option => this.searchOptionRendering(option, \"song\")),\n      filterOptions: options => {\n        return options;\n      },\n      onChange: e => this.handleSearchOptionSelection(e, \"song1\", \"song\"),\n      renderInput: params => React.createElement(TextField, Object.assign({\n        id: \"searchSong1TextField\"\n      }, params, {\n        inputRef: input => this.input = input,\n        style: {\n          width: '300px'\n        },\n        label: \"Chanson #1\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: e => this.searchSong(e, \"song1\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      freeSolo: true,\n      options: this.state.searchSong2Result.map(option => this.searchOptionRendering(option, \"song\")),\n      filterOptions: options => {\n        return options;\n      },\n      onChange: e => this.handleSearchOptionSelection(e, \"song2\", \"song\"),\n      renderInput: params => React.createElement(TextField, Object.assign({\n        id: \"searchSong2TextField\"\n      }, params, {\n        inputRef: input => this.input = input,\n        style: {\n          width: '300px'\n        },\n        label: \"Chanson #2\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: e => this.searchSong(e, \"song2\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: e => this.handleCompareButtonClick(e, \"song\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, \"Comparer\")));\n  }\n\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["/Users/robina/Documents/MIAGE/React/bd-musique/src/App.js"],"names":["React","Component","withStyles","TextField","Button","AppBar","Toolbar","Typography","Autocomplete","Chart","styles","theme","title","button","margin","App","constructor","props","state","topGenre","searchAllInput","searchAllResult","searchAllSelection","searchArtist1Input","searchArtist1Result","searchArtist1Selection","artist1Data","searchArtist2Input","searchArtist2Result","searchArtist2Selection","artist2Data","artistsToCompare","compareArtistsData","searchSong1Input","searchSong1Result","searchSong1Selection","searchSong2Input","searchSong2Result","searchSong2Selection","componentDidMount","getGenrePopularity","searchArtistData","searchedArtist","input","value","trim","setState","artist","request","encodeURI","console","log","fetch","then","response","json","data","artistData","getState","limit","top","getArtistOrSongBySearch","search","getArtistBySearch","artistId","searchResult","filter","option","getSongBySearch","songId","getArtistByName","name","getCompareArtistsData","searchAll","e","target","searchArtist","searchSong","handleSearchOptionSelection","field","type","selection","textContent","split","clearProps","handleCompareButtonClick","artist1","artist2","song1","song2","chartData","albums","length","countSongs","albumList","songsInEachAlbum","map","x","songs","i","searchOptionRendering","albumTitle","topGenreChart","compareArtistsChart","id","artistsWithData","render","classes","height","bind","options","params","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { TextField, Button, AppBar, Toolbar, Typography } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\n\n//import { ResponsiveBar } from '@nivo/bar'\n//import { ResponsiveBubble } from '@nivo/circle-packing'\n\nimport { Chart } from \"react-google-charts\";\n\nimport './App.css'\n\n//////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  STYLES  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nconst styles = theme => ({\n\ttitle: {},\n\tbutton: {\n\t\tmargin: 50\n\t}\n})\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////  APP  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\n\t\t\ttopGenre: null,\n\t\t\t\n\t\t\tsearchAllInput: null,\n\t\t\tsearchAllResult: [],\n\t\t\tsearchAllSelection: null,\n\n\t\t\tsearchArtist1Input: \"\",\n\t\t\tsearchArtist1Result: [],\n\t\t\tsearchArtist1Selection: null,\n\t\t\tartist1Data: null,\n\n\t\t\tsearchArtist2Input: \"\",\n\t\t\tsearchArtist2Result: [],\n\t\t\tsearchArtist2Selection: null,\n\t\t\tartist2Data: null,\n\n\t\t\tartistsToCompare: 0,\n\t\t\tcompareArtistsData: null,\n\n\t\t\tsearchSong1Input: \"\",\n\t\t\tsearchSong1Result: [],\n\t\t\tsearchSong1Selection: null,\n\n\t\t\tsearchSong2Input: \"\",\n\t\t\tsearchSong2Result: [],\n\t\t\tsearchSong2Selection: null,\n\t\t}\n\t}\n\n\t/////////////////////////////////////////\n\n\tcomponentDidMount() {\n\t\tthis.getGenrePopularity(10);\n\t}\n\n\tsearchArtistData() {\n\t\tconst searchedArtist = this.input.value.trim()\n\t\tthis.setState({ artist: searchedArtist })\n\n\t\tconst request = `https://wasabi.i3s.unice.fr/api/v1/artist/name/${encodeURI(searchedArtist)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data != null)\n\t\t\t\t\tthis.setState({ artistData: data })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ artistData: {} })\n\t\t\t\t//console.log(this.state.artistData)\n\t\t\t})\n\t}\n\n\tgetState() {\n\t\tconsole.log(this.state)\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////\n\t///////////////////////////////////  REQUESTS  ///////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////\n\n\tgetGenrePopularity(limit) {\n\t\tlet request = `https://wasabi.i3s.unice.fr/api/v1/artist/genres/popularity`\n\t\tif(limit)\n\t\t\trequest += `?limit=${limit}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data == null)\n\t\t\t\t\tthis.setState({ topGenre: null })\n\t\t\t\telse {\n\t\t\t\t\tlet top = [[]]\n\t\t\t\t\tthis.setState({ topGenre: data })\n\t\t\t\t}\n\t\t\t\tconsole.log(this.state.topGenre)\n\t\t\t})\n\t\t\n\t\t/*const chartData = this.state.topGenres\n\t\tconst bubbles = {\n\t\t\t_id: \"Genres\",\n\t\t\tchildren: this.state.topGenres\n\t\t}*/\n\t}\n\n\t// Requête : recherche d'artistes et chansons\n\tgetArtistOrSongBySearch(search) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data != null)\n\t\t\t\t\tthis.setState({ searchAllResult: data })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchAllResult: null })\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'artistes\n\tgetArtistBySearch(search, artistId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet searchResult\n\t\t\t\tif(data != null)\n\t\t\t\t\tsearchResult = data.filter(option => !option.title)\n\t\t\t\telse\n\t\t\t\t\tsearchResult = []\n\t\t\t\tif(artistId === \"artist1\")\n\t\t\t\t\tthis.setState({ searchArtist1Result: searchResult })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchArtist2Result: searchResult })\n\t\t\t})\n\t}\n\n\t// Requête : recherche de chansons\n\tgetSongBySearch(search, songId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet searchResult\n\t\t\t\tif(data != null)\n\t\t\t\t\tsearchResult = data.filter(option => option.title)\n\t\t\t\telse\n\t\t\t\t\tsearchResult = []\n\t\t\t\tif(songId === \"song1\")\n\t\t\t\t\tthis.setState({ searchSong1Result: searchResult })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchSong2Result: searchResult })\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'un artiste par son nom\n\tgetArtistByName(name, artistId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/api/v1/artist_all/name/${encodeURI(name)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(artistId === \"artist1\")\n\t\t\t\t\tthis.setState({ artist1Data: data })\n\t\t\t\telse if(artistId === \"artist2\")\n\t\t\t\t\tthis.setState({ artist2Data: data })\n\t\t\t\t//let artistsWithData = this.state.artistsToCompare\n\t\t\t\t//console.log(\"artistsToCompare: \" + artistsWithData)\n\t\t\t\tthis.setState({ artistsToCompare: this.state.artistsToCompare + 1 })\n\t\t\t\tif(this.state.artistsToCompare === 2)\n\t\t\t\t\tthis.getCompareArtistsData()\n\t\t\t})\n\t}\n\n\n//////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////  HANDLERS  ///////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\t// Handler de la recherche d'artiste ou chanson (TextField onChange)\n\tsearchAll(e) {\n\t\tconst value = e.target.value.trim()\n\t\tthis.setState({ searchAllInput: value })\n\t\tif(value)\n\t\t\tthis.getArtistOrSongBySearch(value)\n\t\telse\n\t\t\tthis.setState({ searchAllResult: null })\n\t}\n\n\t// Handler de la recherche d'artiste (TextField onChange)\n\tsearchArtist(e, artistId) {\n\t\tconst value = e.target.value.trim()\n\t\tif(artistId === \"artist1\")\n\t\t\tthis.setState({ searchArtist1Input: value })\n\t\telse\n\t\t\tthis.setState({ searchArtist2Input: value })\n\t\tif(value)\n\t\t\tthis.getArtistBySearch(value, artistId)\n\t\telse {\n\t\t\tif(artistId === \"artist1\")\n\t\t\t\tthis.setState({ searchArtist1Result: [] })\n\t\t\telse\n\t\t\t\tthis.setState({ searchArtist2Result: [] })\n\t\t}\n\t}\n\n\t// Handler de la recherche de chanson (TextField onChange)\n\tsearchSong(e, songId) {\n\t\tconst value = e.target.value.trim()\n\t\tif(songId === \"song1\")\n\t\t\tthis.setState({ searchSong1Input: value })\n\t\telse\n\t\t\tthis.setState({ searchSong2Input: value })\n\t\tif(value)\n\t\t\tthis.getSongBySearch(value, songId)\n\t\telse {\n\t\t\tif(songId === \"song1\")\n\t\t\t\tthis.setState({ searchSong1Result: [] })\n\t\t\telse\n\t\t\t\tthis.setState({ searchSong2Result: [] })\n\t\t}\n\t}\n\n\t// Handler de la sélection d'un élément suggéré\n\thandleSearchOptionSelection(e, field, type) {\n\t\t//console.log(e.target)\n\t\tconst selection = e.target.textContent\n\t\t//console.log(selection)\n\t\tif(selection) {\n\t\t\tif(!type) {\n\t\t\t\tlet split = selection.split(\"(\")\n\t\t\t\tlet value = split[0].trim()\n\t\t\t\tthis.setState({ searchAllSelection: value })\n\t\t\t\tif(split[1] === \"artiste)\")\n\t\t\t\t\tconsole.log(\"You've searched an artist: \" + value)\n\t\t\t\telse\n\t\t\t\t\tconsole.log(\"You've searched a song: \" + value)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet value = e.target.textContent\n\t\t\t\tswitch(field) {\n\t\t\t\t\tcase \"artist1\":\n\t\t\t\t\t\tthis.setState({ searchArtist1Selection: value })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"artist2\":\n\t\t\t\t\t\tthis.setState({ searchArtist2Selection: value })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"song1\":\n\t\t\t\t\t\tthis.setState({ searchSong1Selection: value })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"song2\":\n\t\t\t\t\t\tthis.setState({ searchSong2Selection: value })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tif(type === \"artist\")\n\t\t\t\t\tconsole.log(\"You've searched an artist: \" + value)\n\t\t\t\telse if(type === \"song\")\n\t\t\t\t\tconsole.log(\"You've searched a song: \" + value)\n\t\t\t}\n\t\t} else {\n\t\t\tthis.clearProps(field)\n\t\t}\n\t}\n\n\t// Handler\n\thandleCompareButtonClick(e, type) {\n\t\tif(type === \"artist\") {\n\t\t\tlet artist1 = this.state.searchArtist1Selection\n\t\t\tlet artist2 = this.state.searchArtist2Selection\n\t\t\tif(artist1 && artist2) {\n\t\t\t\tif(artist1 === artist2) {\n\t\t\t\t\tconsole.log(\"you want to compare the same artists\")\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.getArtistByName(artist1, \"artist1\")\n\t\t\t\t\tthis.getArtistByName(artist2, \"artist2\")\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"missing 1 artist at least\")\n\t\t\t}\n\t\t} \n\t\telse {\n\t\t\tlet song1 = this.state.searchSong1Selection\n\t\t\tlet song2 = this.state.searchSong2Selection\n\t\t\tif(song1 && song2) {\n\t\t\t\tif(song1 === song2) {\n\t\t\t\t\tconsole.log(\"you want to compare the same songs\")\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//this.getSongByName(song1)\n\t\t\t\t\t//this.getSongByName(song2)\n\t\t\t\t\tconsole.log(\"TODO\")\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"missing 1 song at least\")\n\t\t\t}\n\t\t}\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////  TRI  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\tgetCompareArtistsData() {\n\t\tconst artist1 = this.state.artist1Data\n\t\tconst artist2 = this.state.artist2Data\n\t\tif(artist1 && artist2) {\n\t\t\tlet chartData = [\n\t\t\t\t[\n\t\t\t\t\t\"Champs\", \n\t\t\t\t\tthis.state.searchArtist1Selection, \n\t\t\t\t\tthis.state.searchArtist2Selection\n\t\t\t\t],[\n\t\t\t\t\t\"Albums\",\n\t\t\t\t\tartist1.albums.length,\n\t\t\t\t\tartist2.albums.length\n\t\t\t\t],[\n\t\t\t\t\t\"Chansons\",\n\t\t\t\t\tthis.countSongs(artist1.albums),\n\t\t\t\t\tthis.countSongs(artist2.albums)\n\t\t\t\t]\n\t\t\t]\n\t\t\tthis.setState({ compareArtistsData: chartData })\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"missing artist data\")\n\t\t}\n\t}\n\n\tcountSongs(albumList) {\n\t\tlet songsInEachAlbum = albumList.map(x => x.songs.length)\n\t\tlet songs = 0\n\t\tfor(let i=0; i<songsInEachAlbum.length; i++)\n\t\t\tsongs += songsInEachAlbum[i]\n\t\treturn songs\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////  AFFICHAGE  //////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\t// Gère l'affichage d'un élément suggéré (en paramètre)\n\tsearchOptionRendering(option, type) {\n\t\tif(type === \"artist\")\n\t\t\treturn option.name\n\t\tif(option.title)\n\t\t\treturn `${option.title} (chanson de ${option.name} de l'album ${option.albumTitle})`\n\t\telse\n\t\t\treturn `${option.name} (artiste)`\n\t}\n\n\ttopGenreChart() {\n\t\tif(this.topGenre) {\n\t\t\treturn <div>\n\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\tid=\"topGenre\"\n\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\tdata={this.state.topGenre} />\n\t\t\t\t\t</div> \n\t\t}\n\t}\n\n\tcompareArtistsChart() {\n\t\tif(this.state.compareArtistsData) {\n\t\t\treturn <div>\n\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\tid=\"compareArtistsChart\"\n\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\tdata={this.state.compareArtistsData} />\n\t\t\t\t\t</div>\n\t\t}\n\t}\n\n\tclearProps(id) {\n\t\tlet artistsWithData\n\t\tswitch(id) {\n\t\t\tcase \"artist1\":\n\t\t\t\tartistsWithData = this.state.artistsToCompare\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtist1Input: null,\n\t\t\t\t\tsearchArtist1Result: [],\n\t\t\t\t\tsearchArtist1Selection: null,\n\t\t\t\t\tartist1Data: null,\n\t\t\t\t\tartistsToCompare: artistsWithData - 1,\n\t\t\t\t\tcompareArtistsData: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"artist2\":\n\t\t\t\tartistsWithData = this.state.artistsToCompare\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtist2Input: null,\n\t\t\t\t\tsearchArtist2Result: [],\n\t\t\t\t\tsearchArtist2Selection: null,\n\t\t\t\t\tartist2Data: null,\n\t\t\t\t\tartistsToCompare: artistsWithData - 1,\n\t\t\t\t\tcompareArtistsData: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"song1\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchSong1Input: null,\n\t\t\t\t\tsearchSong1Result: [],\n\t\t\t\t\tsearchSong1Selection: null,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"song2\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchSong2Input: null,\n\t\t\t\t\tsearchSong2Result: [],\n\t\t\t\t\tsearchSong2Selection: null,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"all\":\n\t\t\tdefault:\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchAllInput: null,\n\t\t\t\t\tsearchAllResult: [],\n\t\t\t\t\tsearchAllSelection: null,\n\t\t\t\t})\n\t\t}\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  RENDER  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\trender() {\n\t\tconst { classes } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"App\" style={{ height : '500px' }}>\n\t\t\t\t\n\t\t\t\t<AppBar position=\"static\">\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography className={classes.title} variant=\"h6\" noWrap>\n\t\t\t\t\t\t\tMaterial-UI\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tonClick={ this.getState.bind(this) }>\n\t\t\t\t\t\tGet state\n\t\t\t\t</Button>\n\n\t\t\t\t{this.topGenreChart()}\n\n\t\t\t\t<div>\n\t\t\t\t\t<h3>Chercher un artiste ou une chanson</h3>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\toptions={ this.state.searchAllResult.map(option => this.searchOptionRendering(option)) }\n\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e) }\n\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tid=\"searchAllTextField\"\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\tlabel=\"Recherche\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={ e => this.searchAll(e) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<h3>Comparer deux artistes</h3>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\toptions={ this.state.searchArtist1Result.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist1\", \"artist\") }\n\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tid=\"searchArtist1TextField\"\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\tlabel=\"Artiste #1\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist1\") }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\toptions={ this.state.searchArtist2Result.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist2\", \"artist\") }\n\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tid=\"searchArtist2TextField\"\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\tlabel=\"Artiste #2\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist2\") }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleCompareButtonClick(e, \"artist\") }>Comparer</Button>\n\t\t\t\t</div>\n\n\t\t\t\t{this.compareArtistsChart()}\n\n\t\t\t\t<div>\n\t\t\t\t\t<h3>Comparer deux chansons</h3>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\toptions={ this.state.searchSong1Result.map(option => this.searchOptionRendering(option, \"song\")) }\n\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song1\", \"song\") }\n\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tid=\"searchSong1TextField\"\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\tlabel=\"Chanson #1\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song1\") }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\toptions={ this.state.searchSong2Result.map(option => this.searchOptionRendering(option, \"song\")) }\n\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song2\", \"song\") }\n\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tid=\"searchSong2TextField\"\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\tlabel=\"Chanson #2\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song2\") }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleCompareButtonClick(e, \"song\") }>Comparer</Button>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default withStyles(styles)(App)"]},"metadata":{},"sourceType":"module"}