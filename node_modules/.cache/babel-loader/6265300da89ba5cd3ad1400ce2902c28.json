{"ast":null,"code":"var _jsxFileName = \"/Users/robina/Documents/MIAGE/React/bd-musique/src/App.js\";\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Button, AppBar, Toolbar, Typography, Drawer, List, ListItem, ListItemText, Divider, Paper, Card, CardContent } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab'; //import { ResponsiveBar } from '@nivo/bar'\n//import { ResponsiveBubble } from '@nivo/circle-packing'\n\nimport { Chart } from \"react-google-charts\";\nimport './App.css'; //////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  STYLES  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nconst drawerWidth = 250;\n\nconst styles = theme => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  drawer: {\n    width: drawerWidth\n  },\n  toolbarSpacer: theme.mixins.toolbar,\n  main: {\n    marginLeft: drawerWidth,\n    marginRight: 50,\n    marginTop: 50\n  },\n  card: {\n    marginLeft: 50,\n    marginRight: 50\n  },\n  cardTextFields: {\n    width: 600\n  }\n}); //////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////  APP  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawerItems: [\"GenrePopularity\", \"Artist\", \"CompareArtists\"],\n      drawerSelectedIndex: null,\n      genrePopularityShow: false,\n      languagePopularityShow: false,\n      searchAllShow: false,\n      artistShow: false,\n      compareArtistsShow: false,\n      compareSongsShow: false,\n      totalArtistDB: null,\n      totalAlbumDB: null,\n      totalSongDB: null,\n      topGenre: null,\n      topLanguage: null,\n      searchAllInput: null,\n      searchAllResult: [],\n      searchAllSelection: null,\n      searchArtistInput: null,\n      searchArtistResult: [],\n      searchArtistSelection: null,\n      artistData: null,\n      artistSongsPerYear: null,\n      songData: null,\n      searchArtist1Input: null,\n      searchArtist1Result: [],\n      searchArtist1Selection: null,\n      artist1Data: null,\n      searchArtist2Input: null,\n      searchArtist2Result: [],\n      searchArtist2Selection: null,\n      artist2Data: null,\n      compareArtistsData: null,\n      searchSong1Input: null,\n      searchSong1Result: [],\n      searchSong1Selection: null,\n      searchSong2Input: null,\n      searchSong2Result: [],\n      searchSong2Selection: null\n    };\n  } /////////////////////////////////////////\n\n\n  componentDidMount() {}\n\n  searchArtistData() {\n    const searchedArtist = this.input.value.trim();\n    this.setState({\n      artist: searchedArtist\n    });\n    const request = `https://wasabi.i3s.unice.fr/api/v1/artist/name/${encodeURI(searchedArtist)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data != null) this.setState({\n        artistData: data\n      });else this.setState({\n        artistData: {}\n      }); //console.log(this.state.artistData)\n    });\n  }\n\n  getState() {\n    console.log(this.state);\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  REQUESTS  ///////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  getDBStats() {\n    const request = \"https://wasabi.i3s.unice.fr/search/dbinfo\";\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        totalArtistDB: data.nbArtist,\n        totalAlbumDB: data.nbAlbum,\n        totalSongDB: data.nbSong\n      });\n    });\n  }\n\n  getGenrePopularity(limit) {\n    let request = `https://wasabi.i3s.unice.fr/api/v1/artist/genres/popularity`;\n    if (limit) request += `?limit=${limit}`;\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data == null) this.setState({\n        topGenre: null\n      });else this.getGenrePopularityData(data);\n    });\n  }\n\n  getLanguagePopularity(limit) {\n    let request = `https://wasabi.i3s.unice.fr/api/v1/song/lyrics/language/popularity`;\n    if (limit) request += `?limit=${limit}`;\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data == null) this.setState({\n        topLanguage: null\n      });else this.getLanguagePopularityData(data);\n    });\n  } // Requête : recherche d'artistes et chansons\n\n\n  getArtistOrSongBySearch(search) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data != null) this.setState({\n        searchAllResult: data\n      });else this.setState({\n        searchAllResult: null\n      });\n    });\n  } // Requête : recherche d'artistes\n\n\n  getArtistBySearch(search, artistId) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      let searchResult;\n      if (data != null) searchResult = data.filter(option => !option.title);else searchResult = [];\n      if (artistId === \"artist1\") this.setState({\n        searchArtist1Result: searchResult\n      });else if (artistId === \"artist2\") this.setState({\n        searchArtist2Result: searchResult\n      });else this.setState({\n        searchArtistResult: searchResult\n      });\n    });\n  } // Requête : recherche de chansons\n\n\n  getSongBySearch(search, songId) {\n    const request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      let searchResult;\n      if (data != null) searchResult = data.filter(option => option.title);else searchResult = [];\n      if (songId === \"song1\") this.setState({\n        searchSong1Result: searchResult\n      });else this.setState({\n        searchSong2Result: searchResult\n      });\n    });\n  } // Requête : recherche d'un artiste par son nom\n\n\n  getArtistByName(name, artistId) {\n    const request = `https://wasabi.i3s.unice.fr/api/v1/artist_all/name/${encodeURI(name)}`;\n    console.log(request);\n    fetch(request).then(response => {\n      return response.json();\n    }).then(data => {\n      if (artistId === \"artist1\") {\n        this.setState({\n          artist1Data: data\n        });\n        if (this.state.artist2Data) this.getCompareArtistsData();\n      } else if (artistId === \"artist2\") {\n        this.setState({\n          artist2Data: data\n        });\n        if (this.state.artist1Data) this.getCompareArtistsData();\n      } else {\n        this.setState({\n          artistData: data\n        });\n        this.getArtistChartData(data);\n      }\n    });\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  HANDLERS  ///////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  handleListItemSelect(e, i) {\n    this.setState({\n      drawerSelectedIndex: i\n    });\n\n    switch (i) {\n      case 0:\n        this.setState({\n          genrePopularityShow: true,\n          languagePopularityShow: false,\n          artistShow: false,\n          compareArtistsShow: false\n        });\n        break;\n\n      case 1:\n        this.setState({\n          genrePopularityShow: false,\n          languagePopularityShow: true,\n          artistShow: false,\n          compareArtistsShow: false\n        });\n        break;\n\n      case 2:\n        this.setState({\n          genrePopularityShow: false,\n          languagePopularityShow: false,\n          artistShow: true,\n          compareArtistsShow: false\n        });\n        break;\n\n      case 3:\n        this.setState({\n          genrePopularityShow: false,\n          languagePopularityShow: false,\n          artistShow: false,\n          compareArtistsShow: true\n        });\n        break;\n    }\n  } // Handler de la recherche d'artiste ou chanson (TextField onChange)\n\n\n  searchAll(e) {\n    const value = e.target.value.trim();\n    this.setState({\n      searchAllInput: value\n    });\n    if (value) this.getArtistOrSongBySearch(value);else this.setState({\n      searchAllResult: null\n    });\n  } // Handler de la recherche d'artiste (TextField onChange)\n\n\n  searchArtist(e, artistId) {\n    const value = e.target.value.trim();\n    if (artistId === \"artist1\") this.setState({\n      searchArtist1Input: value\n    });else if (artistId === \"artist2\") this.setState({\n      searchArtist2Input: value\n    });else this.setState({\n      searchArtistInput: value\n    });\n    if (value) this.getArtistBySearch(value, artistId);else {\n      if (artistId === \"artist1\") this.setState({\n        searchArtist1Result: []\n      });else if (artistId === \"artist2\") this.setState({\n        searchArtist2Result: []\n      });else this.setState({\n        searchArtistResult: []\n      });\n    }\n  } // Handler de la recherche de chanson (TextField onChange)\n\n\n  searchSong(e, songId) {\n    const value = e.target.value.trim();\n    if (songId === \"song1\") this.setState({\n      searchSong1Input: value\n    });else this.setState({\n      searchSong2Input: value\n    });\n    if (value) this.getSongBySearch(value, songId);else {\n      if (songId === \"song1\") this.setState({\n        searchSong1Result: []\n      });else this.setState({\n        searchSong2Result: []\n      });\n    }\n  } // Handler de la sélection d'un élément suggéré\n\n\n  handleSearchOptionSelection(e, field, type) {\n    const selection = e.target.textContent;\n\n    if (selection) {\n      if (!type) {\n        let split = selection.split(\"(\");\n        let value = split[0].trim();\n        this.setState({\n          searchAllSelection: value\n        });\n\n        if (split[1] === \"artiste)\") {\n          console.log(\"You've searched an artist: \" + value);\n          this.getArtistByName(value);\n        } else console.log(\"You've searched a song: \" + value);\n      } else {\n        switch (field) {\n          case \"artist\":\n            this.setState({\n              searchArtistSelection: selection\n            });\n            break;\n\n          case \"artist1\":\n            this.setState({\n              searchArtist1Selection: selection\n            });\n            break;\n\n          case \"artist2\":\n            this.setState({\n              searchArtist2Selection: selection\n            });\n            break;\n\n          case \"song1\":\n            this.setState({\n              searchSong1Selection: selection\n            });\n            break;\n\n          case \"song2\":\n            this.setState({\n              searchSong2Selection: selection\n            });\n            break;\n\n          default:\n        }\n\n        if (type === \"artist\") console.log(\"You've searched an artist: \" + selection);else if (type === \"song\") console.log(\"You've searched a song: \" + selection);\n      }\n    } else {\n      console.log(\"clear \" + field);\n      this.clearProps(field);\n    }\n  }\n\n  handleGetArtistDataButtonClick(e) {\n    this.getArtistByName(this.state.searchArtistSelection);\n  } // Handler\n\n\n  handleCompareButtonClick(e, type) {\n    if (type === \"artist\") {\n      let artist1 = this.state.searchArtist1Selection;\n      let artist2 = this.state.searchArtist2Selection;\n\n      if (artist1 && artist2) {\n        if (artist1 === artist2) {\n          console.log(\"you want to compare the same artists\");\n        } else {\n          this.getArtistByName(artist1, \"artist1\");\n          this.getArtistByName(artist2, \"artist2\");\n        }\n      } else {\n        console.log(\"missing 1 artist at least\");\n      }\n    } else {\n      let song1 = this.state.searchSong1Selection;\n      let song2 = this.state.searchSong2Selection;\n\n      if (song1 && song2) {\n        if (song1 === song2) {\n          console.log(\"you want to compare the same songs\");\n        } else {\n          //this.getSongByName(song1)\n          //this.getSongByName(song2)\n          console.log(\"TODO\");\n        }\n      } else {\n        console.log(\"missing 1 song at least\");\n      }\n    }\n  } //////////////////////////////////////////////////////////////////////////////////\n  /////////////////////////////////////  DATA  /////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n  // Supprime les données correspondant à l'id donné\n\n\n  clearProps(id) {\n    switch (id) {\n      case \"artist\":\n        this.setState({\n          searchArtistInput: null,\n          searchArtistResult: [],\n          searchArtistSelection: null,\n          artistData: null,\n          artistSongsPerYear: null\n        });\n        break;\n\n      case \"artist1\":\n        this.setState({\n          searchArtist1Input: null,\n          searchArtist1Result: [],\n          searchArtist1Selection: null,\n          artist1Data: null,\n          compareArtistsData: null\n        });\n        break;\n\n      case \"artist2\":\n        this.setState({\n          searchArtist2Input: null,\n          searchArtist2Result: [],\n          searchArtist2Selection: null,\n          artist2Data: null,\n          compareArtistsData: null\n        });\n        break;\n\n      case \"song1\":\n        this.setState({\n          searchSong1Input: null,\n          searchSong1Result: [],\n          searchSong1Selection: null\n        });\n        break;\n\n      case \"song2\":\n        this.setState({\n          searchSong2Input: null,\n          searchSong2Result: [],\n          searchSong2Selection: null\n        });\n        break;\n\n      case \"all\":\n      default:\n        this.setState({\n          searchAllInput: null,\n          searchAllResult: [],\n          searchAllSelection: null\n        });\n    }\n  }\n\n  getGenrePopularityData(rawData) {\n    let chartData = [[\"Genre\", \"Nombre de chansons\"]];\n\n    for (let i = 0; i < rawData.length; i++) {\n      chartData.push([rawData[i]._id, rawData[i].sum]);\n    }\n\n    this.setState({\n      topGenre: chartData\n    });\n  }\n\n  getLanguagePopularityData(rawData) {\n    let chartData = [[\"Langue\", \"Nombre de chansons\"]];\n\n    for (let i = 0; i < rawData.length; i++) {\n      chartData.push([rawData[i]._id, rawData[i].sum]);\n    }\n\n    this.setState({\n      topLanguage: chartData\n    });\n  }\n\n  getArtistChartData(rawData) {\n    let publicationYears = {};\n    const albumList = rawData.albums;\n\n    for (let i = 0; i < albumList.length; i++) {\n      let songList = albumList[i].songs;\n\n      for (let j = 0; j < songList.length; j++) {\n        let year = songList[j].publicationDate.split('-')[0];\n        if (publicationYears[year]) publicationYears[year]++;else publicationYears[year] = 1;\n      }\n    }\n\n    let songsPerYearData = [[\"Année\", \"Nombre de chansons\"]];\n    const years = Object.keys(publicationYears);\n\n    for (let i = 0; i < years.length; i++) {\n      let year = years[i];\n      if (year && year !== \"0000\") songsPerYearData.push([parseInt(year), publicationYears[year]]);\n    }\n\n    this.setState({\n      artistSongsPerYear: songsPerYearData\n    });\n  }\n\n  getCompareArtistsData() {\n    const artist1 = this.state.artist1Data;\n    const artist2 = this.state.artist2Data;\n\n    if (artist1 && artist2) {\n      let chartData = [[\"Champs\", this.state.searchArtist1Selection, this.state.searchArtist2Selection], [\"Albums\", this.countAlbums(artist1.albums), this.countAlbums(artist2.albums)], [\"Chansons\", this.countSongs(artist1.albums), this.countSongs(artist2.albums)]];\n      this.setState({\n        compareArtistsData: chartData\n      });\n    } else {\n      console.log(\"missing artist data\");\n    }\n  }\n\n  countAlbums(albumList) {\n    let albums = 0;\n\n    for (let i = 0; i < albumList.length; i++) {\n      if (albumList[i].publicationDate) {\n        albums++;\n      }\n    }\n\n    return albums;\n  }\n\n  countSongs(albumList) {\n    let songsInEachAlbum = albumList.map(x => x.songs.length);\n    let songs = 0;\n\n    for (let i = 0; i < songsInEachAlbum.length; i++) songs += songsInEachAlbum[i];\n\n    return songs;\n  } //////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////  AFFICHAGE  //////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n  // Gère l'affichage d'un élément suggéré (en paramètre)\n\n\n  searchOptionRendering(option, type) {\n    if (type === \"artist\") return option.name;\n    if (option.title) return `${option.title} (chanson de ${option.name} de l'album ${option.albumTitle})`;else return `${option.name} (artiste)`;\n  }\n\n  topGenreChart() {\n    if (this.state.genrePopularityShow) {\n      this.getGenrePopularity(10);\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619\n        },\n        __self: this\n      }, \"Popularit\\xE9 des genres musicaux\"), React.createElement(Chart, {\n        id: \"topGenre\",\n        chartType: \"BarChart\",\n        data: this.state.topGenre,\n        width: 1000,\n        height: 700,\n        options: {\n          //chartArea: {width: '50%'},\n          hAxis: {\n            title: 'Nombre de chansons',\n            format: '#'\n          },\n          vAxis: {\n            title: 'Genres'\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620\n        },\n        __self: this\n      })));\n    }\n  }\n\n  topLanguageChart() {\n    if (this.state.languagePopularityShow) {\n      this.getLanguagePopularity();\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649\n        },\n        __self: this\n      }, \"Popularit\\xE9 des langues\"), React.createElement(Chart, {\n        id: \"topLanguage\",\n        chartType: \"BarChart\",\n        data: this.state.topLanguage,\n        width: 1000,\n        height: 700,\n        options: {\n          //chartArea: {width: '50%'},\n          hAxis: {\n            title: 'Nombre de chansons',\n            format: '#'\n          },\n          vAxis: {\n            title: 'Langues'\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650\n        },\n        __self: this\n      })));\n    }\n  }\n\n  searchAllDisplay() {\n    if (this.state.searchAllShow) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677\n        },\n        __self: this\n      }, \"Chercher un artiste ou une chanson\"), React.createElement(Autocomplete, {\n        freeSolo: true,\n        options: this.state.searchAllResult.map(option => this.searchOptionRendering(option)),\n        filterOptions: options => {\n          return options;\n        },\n        onChange: e => this.handleSearchOptionSelection(e),\n        renderInput: params => React.createElement(TextField, Object.assign({\n          id: \"searchAllTextField\"\n        }, params, {\n          inputRef: input => this.input = input,\n          style: {\n            width: '300px'\n          },\n          label: \"Recherche\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          onChange: e => this.searchAll(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 684\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      }));\n    }\n  }\n\n  searchArtistDisplay() {\n    if (this.state.artistShow) {\n      const data = this.state.artistSongsPerYear;\n\n      if (!data) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 704\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 705\n          },\n          __self: this\n        }, \"Chercher un artiste\"), React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 706\n          },\n          __self: this\n        }, React.createElement(CardContent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 707\n          },\n          __self: this\n        }, React.createElement(Autocomplete, {\n          freeSolo: true,\n          options: this.state.searchArtistResult.map(option => this.searchOptionRendering(option, \"artist\")),\n          filterOptions: options => {\n            return options;\n          },\n          onChange: e => this.handleSearchOptionSelection(e, \"artist\", \"artist\"),\n          renderInput: params => React.createElement(TextField, Object.assign({\n            id: \"searchAllTextField\"\n          }, params, {\n            inputRef: input => this.input = input,\n            style: {\n              width: '300px'\n            },\n            label: \"Artiste\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            onChange: e => this.searchArtist(e, \"artist\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 714\n            },\n            __self: this\n          })),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 708\n          },\n          __self: this\n        }), React.createElement(Button, {\n          variant: \"outlined\",\n          onClick: e => this.handleGetArtistDataButtonClick(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 726\n          },\n          __self: this\n        }, \"OK\"))));\n      } else return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      }, this.state.artistData.name), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        id: \"artistChart\",\n        chartType: \"ColumnChart\",\n        data: data,\n        height: 500,\n        options: {\n          title: 'Nombre de chansons par année',\n          hAxis: {\n            title: 'Années',\n            format: '#',\n            maxValue: 2020\n          },\n          vAxis: {\n            title: 'Nombre de chansons'\n          },\n          legend: {\n            position: 'none'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736\n        },\n        __self: this\n      }))), React.createElement(Button, {\n        variant: \"outlined\",\n        style: {\n          marginTop: 50\n        },\n        onClick: e => this.clearProps(\"artist\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757\n        },\n        __self: this\n      }, \"Chercher un autre artiste\"));\n    }\n  }\n\n  compareArtistsDisplay() {\n    if (this.state.compareArtistsShow) {\n      const data = this.state.compareArtistsData;\n\n      if (!data) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 771\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 772\n          },\n          __self: this\n        }, \"Comparer deux artistes\"), React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 773\n          },\n          __self: this\n        }, React.createElement(CardContent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 774\n          },\n          __self: this\n        }, React.createElement(Autocomplete, {\n          freeSolo: true,\n          options: this.state.searchArtist1Result.map(option => this.searchOptionRendering(option, \"artist\")),\n          filterOptions: options => {\n            return options;\n          },\n          onChange: e => this.handleSearchOptionSelection(e, \"artist1\", \"artist\"),\n          renderInput: params => React.createElement(TextField, Object.assign({\n            id: \"searchArtist1TextField\"\n          }, params, {\n            inputRef: input => this.input = input,\n            style: {\n              width: '300px'\n            },\n            label: \"Artiste #1\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            onChange: e => this.searchArtist(e, \"artist1\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 781\n            },\n            __self: this\n          })),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 775\n          },\n          __self: this\n        }), React.createElement(Autocomplete, {\n          freeSolo: true,\n          options: this.state.searchArtist2Result.map(option => this.searchOptionRendering(option, \"artist\")),\n          filterOptions: options => {\n            return options;\n          },\n          onChange: e => this.handleSearchOptionSelection(e, \"artist2\", \"artist\"),\n          renderInput: params => React.createElement(TextField, Object.assign({\n            id: \"searchArtist2TextField\"\n          }, params, {\n            inputRef: input => this.input = input,\n            style: {\n              width: '300px'\n            },\n            label: \"Artiste #2\",\n            margin: \"normal\",\n            variant: \"outlined\",\n            onChange: e => this.searchArtist(e, \"artist2\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 799\n            },\n            __self: this\n          })),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 793\n          },\n          __self: this\n        }), React.createElement(Button, {\n          variant: \"outlined\",\n          onClick: e => this.handleCompareButtonClick(e, \"artist\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 811\n          },\n          __self: this\n        }, \"Comparer\"))));\n      } else {\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 817\n          },\n          __self: this\n        }, React.createElement(CardContent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 818\n          },\n          __self: this\n        }, React.createElement(Chart, {\n          id: \"compareArtistsChart\",\n          chartType: \"BarChart\",\n          data: data,\n          options: {\n            title: 'Comparaison entre deux artistes'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 819\n          },\n          __self: this\n        })));\n      }\n    }\n  }\n\n  compareSongsDisplay() {\n    if (this.state.compareSongsShow) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 834\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 835\n        },\n        __self: this\n      }, \"Comparer deux chansons\"), React.createElement(Autocomplete, {\n        freeSolo: true,\n        options: this.state.searchSong1Result.map(option => this.searchOptionRendering(option, \"song\")),\n        filterOptions: options => {\n          return options;\n        },\n        onChange: e => this.handleSearchOptionSelection(e, \"song1\", \"song\"),\n        renderInput: params => React.createElement(TextField, Object.assign({\n          id: \"searchSong1TextField\"\n        }, params, {\n          inputRef: input => this.input = input,\n          style: {\n            width: '300px'\n          },\n          label: \"Chanson #1\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          onChange: e => this.searchSong(e, \"song1\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 842\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 836\n        },\n        __self: this\n      }), React.createElement(Autocomplete, {\n        freeSolo: true,\n        options: this.state.searchSong2Result.map(option => this.searchOptionRendering(option, \"song\")),\n        filterOptions: options => {\n          return options;\n        },\n        onChange: e => this.handleSearchOptionSelection(e, \"song2\", \"song\"),\n        renderInput: params => React.createElement(TextField, Object.assign({\n          id: \"searchSong2TextField\"\n        }, params, {\n          inputRef: input => this.input = input,\n          style: {\n            width: '300px'\n          },\n          label: \"Chanson #2\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          onChange: e => this.searchSong(e, \"song2\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 860\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"outlined\",\n        onClick: e => this.handleCompareButtonClick(e, \"song\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872\n        },\n        __self: this\n      }, \"Comparer\"));\n    }\n  } //////////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////  RENDER  ////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        height: '500px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }, React.createElement(AppBar, {\n      position: \"fixed\",\n      className: classes.appBar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.title,\n      variant: \"h6\",\n      noWrap: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }, \"Material-UI\"), React.createElement(Button, {\n      variant: \"outlined\",\n      onClick: this.getState.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892\n      },\n      __self: this\n    }, \"Get state\"))), React.createElement(Drawer, {\n      variant: \"permanent\",\n      className: classes.drawer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.toolbarSpacer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901\n      },\n      __self: this\n    }), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 0,\n      onClick: e => this.handleListItemSelect(e, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Popularit\\xE9 des genres\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 1,\n      onClick: e => this.handleListItemSelect(e, 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Popularit\\xE9 des langues\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }), React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 2,\n      onClick: e => this.handleListItemSelect(e, 2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Chercher un artiste\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      selected: this.state.drawerSelectedIndex === 3,\n      onClick: e => this.handleListItemSelect(e, 3),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: \"Comparer deux artistes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: classes.main,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.toolbarSpacer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932\n      },\n      __self: this\n    }), this.topGenreChart(), this.topLanguageChart(), this.searchArtistDisplay(), this.compareArtistsDisplay()));\n  }\n\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["/Users/robina/Documents/MIAGE/React/bd-musique/src/App.js"],"names":["React","Component","withStyles","TextField","Button","AppBar","Toolbar","Typography","Drawer","List","ListItem","ListItemText","Divider","Paper","Card","CardContent","Autocomplete","Chart","drawerWidth","styles","theme","appBar","zIndex","drawer","width","toolbarSpacer","mixins","toolbar","main","marginLeft","marginRight","marginTop","card","cardTextFields","App","constructor","props","state","drawerItems","drawerSelectedIndex","genrePopularityShow","languagePopularityShow","searchAllShow","artistShow","compareArtistsShow","compareSongsShow","totalArtistDB","totalAlbumDB","totalSongDB","topGenre","topLanguage","searchAllInput","searchAllResult","searchAllSelection","searchArtistInput","searchArtistResult","searchArtistSelection","artistData","artistSongsPerYear","songData","searchArtist1Input","searchArtist1Result","searchArtist1Selection","artist1Data","searchArtist2Input","searchArtist2Result","searchArtist2Selection","artist2Data","compareArtistsData","searchSong1Input","searchSong1Result","searchSong1Selection","searchSong2Input","searchSong2Result","searchSong2Selection","componentDidMount","searchArtistData","searchedArtist","input","value","trim","setState","artist","request","encodeURI","console","log","fetch","then","response","json","data","getState","getDBStats","nbArtist","nbAlbum","nbSong","getGenrePopularity","limit","getGenrePopularityData","getLanguagePopularity","getLanguagePopularityData","getArtistOrSongBySearch","search","getArtistBySearch","artistId","searchResult","filter","option","title","getSongBySearch","songId","getArtistByName","name","getCompareArtistsData","getArtistChartData","handleListItemSelect","e","i","searchAll","target","searchArtist","searchSong","handleSearchOptionSelection","field","type","selection","textContent","split","clearProps","handleGetArtistDataButtonClick","handleCompareButtonClick","artist1","artist2","song1","song2","id","rawData","chartData","length","push","_id","sum","publicationYears","albumList","albums","songList","songs","j","year","publicationDate","songsPerYearData","years","Object","keys","parseInt","countAlbums","countSongs","songsInEachAlbum","map","x","searchOptionRendering","albumTitle","topGenreChart","hAxis","format","vAxis","legend","position","topLanguageChart","searchAllDisplay","options","params","searchArtistDisplay","maxValue","compareArtistsDisplay","compareSongsDisplay","render","classes","height","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\n\nimport { TextField, Button, AppBar, Toolbar, Typography, Drawer, List, ListItem, ListItemText, Divider, Paper, Card, CardContent } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\n\n//import { ResponsiveBar } from '@nivo/bar'\n//import { ResponsiveBubble } from '@nivo/circle-packing'\n\nimport { Chart } from \"react-google-charts\";\n\nimport './App.css'\n\n//////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  STYLES  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nconst drawerWidth = 250\n\nconst styles = theme => ({\n\tappBar: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t},\n\tdrawer: {\n\t\twidth: drawerWidth\n\t},\n\ttoolbarSpacer: theme.mixins.toolbar,\n\tmain: {\n\t\tmarginLeft: drawerWidth,\n\t\tmarginRight: 50,\n\t\tmarginTop: 50\n\t},\n\tcard: {\n\t\tmarginLeft: 50,\n\t\tmarginRight: 50\n\t},\n\tcardTextFields: {\n\t\twidth: 600\n\t}\n})\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////  APP  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\n\t\t\tdrawerItems: [\n\t\t\t\t\"GenrePopularity\",\n\t\t\t\t\"Artist\",\n\t\t\t\t\"CompareArtists\"\n\t\t\t],\n\t\t\tdrawerSelectedIndex: null,\n\n\t\t\tgenrePopularityShow: false,\n\t\t\tlanguagePopularityShow: false,\n\t\t\tsearchAllShow: false,\n\t\t\tartistShow: false,\n\t\t\tcompareArtistsShow: false,\n\t\t\tcompareSongsShow: false,\n\n\t\t\ttotalArtistDB: null,\n\t\t\ttotalAlbumDB: null,\n\t\t\ttotalSongDB: null,\n\n\t\t\ttopGenre: null,\n\t\t\ttopLanguage: null,\n\t\t\t\n\t\t\tsearchAllInput: null,\n\t\t\tsearchAllResult: [],\n\t\t\tsearchAllSelection: null,\n\n\t\t\tsearchArtistInput: null,\n\t\t\tsearchArtistResult: [],\n\t\t\tsearchArtistSelection: null,\n\t\t\tartistData: null,\n\t\t\tartistSongsPerYear: null,\n\n\t\t\tsongData: null,\n\n\t\t\tsearchArtist1Input: null,\n\t\t\tsearchArtist1Result: [],\n\t\t\tsearchArtist1Selection: null,\n\t\t\tartist1Data: null,\n\n\t\t\tsearchArtist2Input: null,\n\t\t\tsearchArtist2Result: [],\n\t\t\tsearchArtist2Selection: null,\n\t\t\tartist2Data: null,\n\n\t\t\tcompareArtistsData: null,\n\n\t\t\tsearchSong1Input: null,\n\t\t\tsearchSong1Result: [],\n\t\t\tsearchSong1Selection: null,\n\n\t\t\tsearchSong2Input: null,\n\t\t\tsearchSong2Result: [],\n\t\t\tsearchSong2Selection: null,\n\t\t}\n\t}\n\n\t/////////////////////////////////////////\n\n\tcomponentDidMount() {\n\t}\n\n\tsearchArtistData() {\n\t\tconst searchedArtist = this.input.value.trim()\n\t\tthis.setState({ artist: searchedArtist })\n\n\t\tconst request = `https://wasabi.i3s.unice.fr/api/v1/artist/name/${encodeURI(searchedArtist)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data != null)\n\t\t\t\t\tthis.setState({ artistData: data })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ artistData: {} })\n\t\t\t\t//console.log(this.state.artistData)\n\t\t\t})\n\t}\n\n\tgetState() {\n\t\tconsole.log(this.state)\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////\n\t///////////////////////////////////  REQUESTS  ///////////////////////////////////\n\t//////////////////////////////////////////////////////////////////////////////////\n\n\tgetDBStats() {\n\t\tconst request = \"https://wasabi.i3s.unice.fr/search/dbinfo\"\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttotalArtistDB: data.nbArtist,\n\t\t\t\t\ttotalAlbumDB: data.nbAlbum,\n\t\t\t\t\ttotalSongDB: data.nbSong\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tgetGenrePopularity(limit) {\n\t\tlet request = `https://wasabi.i3s.unice.fr/api/v1/artist/genres/popularity`\n\t\tif(limit)\n\t\t\trequest += `?limit=${limit}`\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data == null)\n\t\t\t\t\tthis.setState({ topGenre: null })\n\t\t\t\telse\n\t\t\t\t\tthis.getGenrePopularityData(data)\n\t\t\t})\n\t}\n\n\tgetLanguagePopularity(limit) {\n\t\tlet request = `https://wasabi.i3s.unice.fr/api/v1/song/lyrics/language/popularity`\n\t\tif(limit)\n\t\t\trequest += `?limit=${limit}`\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data == null)\n\t\t\t\t\tthis.setState({ topLanguage: null })\n\t\t\t\telse\n\t\t\t\t\tthis.getLanguagePopularityData(data)\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'artistes et chansons\n\tgetArtistOrSongBySearch(search) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(data != null)\n\t\t\t\t\tthis.setState({ searchAllResult: data })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchAllResult: null })\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'artistes\n\tgetArtistBySearch(search, artistId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet searchResult\n\t\t\t\tif(data != null)\n\t\t\t\t\tsearchResult = data.filter(option => !option.title)\n\t\t\t\telse\n\t\t\t\t\tsearchResult = []\n\t\t\t\tif(artistId === \"artist1\")\n\t\t\t\t\tthis.setState({ searchArtist1Result: searchResult })\n\t\t\t\telse if(artistId === \"artist2\")\n\t\t\t\t\tthis.setState({ searchArtist2Result: searchResult })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchArtistResult: searchResult })\n\t\t\t})\n\t}\n\n\t// Requête : recherche de chansons\n\tgetSongBySearch(search, songId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/search/fulltext/${encodeURI(search)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tlet searchResult\n\t\t\t\tif(data != null)\n\t\t\t\t\tsearchResult = data.filter(option => option.title)\n\t\t\t\telse\n\t\t\t\t\tsearchResult = []\n\t\t\t\tif(songId === \"song1\")\n\t\t\t\t\tthis.setState({ searchSong1Result: searchResult })\n\t\t\t\telse\n\t\t\t\t\tthis.setState({ searchSong2Result: searchResult })\n\t\t\t})\n\t}\n\n\t// Requête : recherche d'un artiste par son nom\n\tgetArtistByName(name, artistId) {\n\t\tconst request = `https://wasabi.i3s.unice.fr/api/v1/artist_all/name/${encodeURI(name)}`\n\t\tconsole.log(request)\n\n\t\tfetch(request)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tif(artistId === \"artist1\") {\n\t\t\t\t\tthis.setState({ artist1Data: data })\n\t\t\t\t\tif(this.state.artist2Data)\n\t\t\t\t\t\tthis.getCompareArtistsData()\n\t\t\t\t} else if(artistId === \"artist2\") {\n\t\t\t\t\tthis.setState({ artist2Data: data })\n\t\t\t\t\tif(this.state.artist1Data)\n\t\t\t\t\t\tthis.getCompareArtistsData()\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({ artistData: data })\n\t\t\t\t\tthis.getArtistChartData(data)\n\t\t\t\t}\n\t\t\t})\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////  HANDLERS  ///////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\thandleListItemSelect(e, i) {\n\t\tthis.setState({ drawerSelectedIndex: i })\n\t\tswitch(i) {\n\t\t\tcase 0:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: true,\n\t\t\t\t\tlanguagePopularityShow: false,\n\t\t\t\t\tartistShow: false,\n\t\t\t\t\tcompareArtistsShow: false,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 1:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: false,\n\t\t\t\t\tlanguagePopularityShow: true,\n\t\t\t\t\tartistShow: false,\n\t\t\t\t\tcompareArtistsShow: false,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: false,\n\t\t\t\t\tlanguagePopularityShow: false,\n\t\t\t\t\tartistShow: true,\n\t\t\t\t\tcompareArtistsShow: false,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 3:\n\t\t\t\tthis.setState({\n\t\t\t\t\tgenrePopularityShow: false,\n\t\t\t\t\tlanguagePopularityShow: false,\n\t\t\t\t\tartistShow: false,\n\t\t\t\t\tcompareArtistsShow: true,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\t// Handler de la recherche d'artiste ou chanson (TextField onChange)\n\tsearchAll(e) {\n\t\tconst value = e.target.value.trim()\n\t\tthis.setState({ searchAllInput: value })\n\t\tif(value)\n\t\t\tthis.getArtistOrSongBySearch(value)\n\t\telse\n\t\t\tthis.setState({ searchAllResult: null })\n\t}\n\n\t// Handler de la recherche d'artiste (TextField onChange)\n\tsearchArtist(e, artistId) {\n\t\tconst value = e.target.value.trim()\n\t\tif(artistId === \"artist1\")\n\t\t\tthis.setState({ searchArtist1Input: value })\n\t\telse if(artistId === \"artist2\")\n\t\t\tthis.setState({ searchArtist2Input: value })\n\t\telse\n\t\t\tthis.setState({ searchArtistInput: value })\n\t\tif(value)\n\t\t\tthis.getArtistBySearch(value, artistId)\n\t\telse {\n\t\t\tif(artistId === \"artist1\")\n\t\t\t\tthis.setState({ searchArtist1Result: [] })\n\t\t\telse if(artistId === \"artist2\")\n\t\t\t\tthis.setState({ searchArtist2Result: [] })\n\t\t\telse\n\t\t\t\tthis.setState({ searchArtistResult: [] })\n\t\t}\n\t}\n\n\t// Handler de la recherche de chanson (TextField onChange)\n\tsearchSong(e, songId) {\n\t\tconst value = e.target.value.trim()\n\t\tif(songId === \"song1\")\n\t\t\tthis.setState({ searchSong1Input: value })\n\t\telse\n\t\t\tthis.setState({ searchSong2Input: value })\n\t\tif(value)\n\t\t\tthis.getSongBySearch(value, songId)\n\t\telse {\n\t\t\tif(songId === \"song1\")\n\t\t\t\tthis.setState({ searchSong1Result: [] })\n\t\t\telse\n\t\t\t\tthis.setState({ searchSong2Result: [] })\n\t\t}\n\t}\n\n\t// Handler de la sélection d'un élément suggéré\n\thandleSearchOptionSelection(e, field, type) {\n\t\tconst selection = e.target.textContent\n\t\tif(selection) {\n\t\t\tif(!type) {\n\t\t\t\tlet split = selection.split(\"(\")\n\t\t\t\tlet value = split[0].trim()\n\t\t\t\tthis.setState({ searchAllSelection: value })\n\t\t\t\tif(split[1] === \"artiste)\") {\n\t\t\t\t\tconsole.log(\"You've searched an artist: \" + value)\n\t\t\t\t\tthis.getArtistByName(value)\n\t\t\t\t} else\n\t\t\t\t\tconsole.log(\"You've searched a song: \" + value)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tswitch(field) {\n\t\t\t\t\tcase \"artist\":\n\t\t\t\t\t\tthis.setState({ searchArtistSelection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"artist1\":\n\t\t\t\t\t\tthis.setState({ searchArtist1Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"artist2\":\n\t\t\t\t\t\tthis.setState({ searchArtist2Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"song1\":\n\t\t\t\t\t\tthis.setState({ searchSong1Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"song2\":\n\t\t\t\t\t\tthis.setState({ searchSong2Selection: selection })\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tif(type === \"artist\")\n\t\t\t\t\tconsole.log(\"You've searched an artist: \" + selection)\n\t\t\t\telse if(type === \"song\")\n\t\t\t\t\tconsole.log(\"You've searched a song: \" + selection)\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(\"clear \" + field)\n\t\t\tthis.clearProps(field)\n\t\t}\n\t}\n\n\thandleGetArtistDataButtonClick(e) {\n\t\tthis.getArtistByName(this.state.searchArtistSelection)\n\t}\n\n\t// Handler\n\thandleCompareButtonClick(e, type) {\n\t\tif(type === \"artist\") {\n\t\t\tlet artist1 = this.state.searchArtist1Selection\n\t\t\tlet artist2 = this.state.searchArtist2Selection\n\t\t\tif(artist1 && artist2) {\n\t\t\t\tif(artist1 === artist2) {\n\t\t\t\t\tconsole.log(\"you want to compare the same artists\")\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.getArtistByName(artist1, \"artist1\")\n\t\t\t\t\tthis.getArtistByName(artist2, \"artist2\")\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"missing 1 artist at least\")\n\t\t\t}\n\t\t} \n\t\telse {\n\t\t\tlet song1 = this.state.searchSong1Selection\n\t\t\tlet song2 = this.state.searchSong2Selection\n\t\t\tif(song1 && song2) {\n\t\t\t\tif(song1 === song2) {\n\t\t\t\t\tconsole.log(\"you want to compare the same songs\")\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//this.getSongByName(song1)\n\t\t\t\t\t//this.getSongByName(song2)\n\t\t\t\t\tconsole.log(\"TODO\")\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"missing 1 song at least\")\n\t\t\t}\n\t\t}\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////  DATA  /////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\t// Supprime les données correspondant à l'id donné\n\tclearProps(id) {\n\t\tswitch(id) {\n\t\t\tcase \"artist\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtistInput: null,\n\t\t\t\t\tsearchArtistResult: [],\n\t\t\t\t\tsearchArtistSelection: null,\n\t\t\t\t\tartistData: null,\n\t\t\t\t\tartistSongsPerYear: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"artist1\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtist1Input: null,\n\t\t\t\t\tsearchArtist1Result: [],\n\t\t\t\t\tsearchArtist1Selection: null,\n\t\t\t\t\tartist1Data: null,\n\t\t\t\t\tcompareArtistsData: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"artist2\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchArtist2Input: null,\n\t\t\t\t\tsearchArtist2Result: [],\n\t\t\t\t\tsearchArtist2Selection: null,\n\t\t\t\t\tartist2Data: null,\n\t\t\t\t\tcompareArtistsData: null\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"song1\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchSong1Input: null,\n\t\t\t\t\tsearchSong1Result: [],\n\t\t\t\t\tsearchSong1Selection: null,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"song2\":\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchSong2Input: null,\n\t\t\t\t\tsearchSong2Result: [],\n\t\t\t\t\tsearchSong2Selection: null,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase \"all\":\n\t\t\tdefault:\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchAllInput: null,\n\t\t\t\t\tsearchAllResult: [],\n\t\t\t\t\tsearchAllSelection: null\n\t\t\t\t})\n\t\t}\n\t}\n\n\tgetGenrePopularityData(rawData) {\n\t\tlet chartData = [[\"Genre\", \"Nombre de chansons\"]]\n\t\tfor(let i=0; i<rawData.length; i++){\n\t\t\tchartData.push([\n\t\t\t\trawData[i]._id,\n\t\t\t\trawData[i].sum\n\t\t\t])\n\t\t}\n\t\tthis.setState({ topGenre: chartData })\n\t}\n\n\tgetLanguagePopularityData(rawData) {\n\t\tlet chartData = [[\"Langue\", \"Nombre de chansons\"]]\n\t\tfor(let i=0; i<rawData.length; i++){\n\t\t\tchartData.push([\n\t\t\t\trawData[i]._id,\n\t\t\t\trawData[i].sum\n\t\t\t])\n\t\t}\n\t\tthis.setState({ topLanguage: chartData })\n\t}\n\n\tgetArtistChartData(rawData) {\n\t\tlet publicationYears = {}\n\t\tconst albumList = rawData.albums\n\t\tfor(let i=0; i<albumList.length; i++){\n\t\t\tlet songList = albumList[i].songs\n\t\t\tfor(let j=0; j<songList.length; j++){\n\t\t\t\tlet year = songList[j].publicationDate.split('-')[0]\n\t\t\t\tif(publicationYears[year]) \n\t\t\t\t\tpublicationYears[year]++\n\t\t\t\telse\n\t\t\t\t\tpublicationYears[year] = 1\n\t\t\t}\n\t\t}\n\t\tlet songsPerYearData = [[\"Année\", \"Nombre de chansons\"]]\n\t\tconst years = Object.keys(publicationYears)\n\t\tfor(let i=0; i<years.length; i++){\n\t\t\tlet year = years[i]\n\t\t\tif(year && year!==\"0000\")\n\t\t\t\tsongsPerYearData.push([parseInt(year), publicationYears[year]])\n\t\t}\n\t\tthis.setState({ artistSongsPerYear: songsPerYearData })\n\t}\n\n\tgetCompareArtistsData() {\n\t\tconst artist1 = this.state.artist1Data\n\t\tconst artist2 = this.state.artist2Data\n\t\tif(artist1 && artist2) {\n\t\t\tlet chartData = [\n\t\t\t\t[\n\t\t\t\t\t\"Champs\", \n\t\t\t\t\tthis.state.searchArtist1Selection, \n\t\t\t\t\tthis.state.searchArtist2Selection\n\t\t\t\t],[\n\t\t\t\t\t\"Albums\",\n\t\t\t\t\tthis.countAlbums(artist1.albums),\n\t\t\t\t\tthis.countAlbums(artist2.albums)\n\t\t\t\t],[\n\t\t\t\t\t\"Chansons\",\n\t\t\t\t\tthis.countSongs(artist1.albums),\n\t\t\t\t\tthis.countSongs(artist2.albums)\n\t\t\t\t]\n\t\t\t]\n\t\t\tthis.setState({ compareArtistsData: chartData })\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"missing artist data\")\n\t\t}\n\t}\n\n\tcountAlbums(albumList) {\n\t\tlet albums = 0\n\t\tfor(let i=0; i<albumList.length; i++){\n\t\t\tif(albumList[i].publicationDate){\n\t\t\t\talbums++\n\t\t\t}\n\t\t}\n\t\treturn albums\n\t}\n\n\tcountSongs(albumList) {\n\t\tlet songsInEachAlbum = albumList.map(x => x.songs.length)\n\t\tlet songs = 0\n\t\tfor(let i=0; i<songsInEachAlbum.length; i++)\n\t\t\tsongs += songsInEachAlbum[i]\n\t\treturn songs\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////  AFFICHAGE  //////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\t// Gère l'affichage d'un élément suggéré (en paramètre)\n\tsearchOptionRendering(option, type) {\n\t\tif(type === \"artist\")\n\t\t\treturn option.name\n\t\tif(option.title)\n\t\t\treturn `${option.title} (chanson de ${option.name} de l'album ${option.albumTitle})`\n\t\telse\n\t\t\treturn `${option.name} (artiste)`\n\t}\n\n\ttopGenreChart() {\n\t\tif(this.state.genrePopularityShow) {\n\t\t\tthis.getGenrePopularity(10)\n\t\t\treturn <Card>\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<h3>Popularité des genres musicaux</h3>\n\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\tid=\"topGenre\"\n\t\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\t\tdata={this.state.topGenre}\n\t\t\t\t\t\t\t\twidth={1000}\n\t\t\t\t\t\t\t\theight={700}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\t//chartArea: {width: '50%'},\n\t\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons',\n\t\t\t\t\t\t\t\t\t\tformat: '#'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: 'Genres'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card> \n\t\t}\n\t}\n\n\ttopLanguageChart() {\n\t\tif(this.state.languagePopularityShow) {\n\t\t\tthis.getLanguagePopularity()\n\t\t\treturn <Card>\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<h3>Popularité des langues</h3>\n\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\tid=\"topLanguage\"\n\t\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\t\tdata={this.state.topLanguage}\n\t\t\t\t\t\t\t\twidth={1000}\n\t\t\t\t\t\t\t\theight={700}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\t//chartArea: {width: '50%'},\n\t\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons',\n\t\t\t\t\t\t\t\t\t\tformat: '#'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: 'Langues'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t}\n\t}\n\n\tsearchAllDisplay() {\n\t\tif(this.state.searchAllShow) {\n\t\t\treturn <div>\n\t\t\t\t\t\t<h3>Chercher un artiste ou une chanson</h3>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\toptions={ this.state.searchAllResult.map(option => this.searchOptionRendering(option)) }\n\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e) }\n\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid=\"searchAllTextField\"\n\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\tlabel=\"Recherche\"\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tonChange={ e => this.searchAll(e) }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t}\n\t}\n\n\tsearchArtistDisplay() {\n\t\tif(this.state.artistShow) {\n\t\t\tconst data = this.state.artistSongsPerYear\n\t\t\tif(!data){\n\t\t\t\treturn <div>\n\t\t\t\t\t\t\t<h3>Chercher un artiste</h3>\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\t\t\t\toptions={ this.state.searchArtistResult.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist\", \"artist\") }\n\t\t\t\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"searchAllTextField\"\n\t\t\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Artiste\"\n\t\t\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist\") }\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleGetArtistDataButtonClick(e) }>OK</Button>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</div>\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn <div>\n\t\t\t\t\t\t\t<h3>{this.state.artistData.name}</h3>\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\t\t\tid=\"artistChart\"\n\t\t\t\t\t\t\t\t\t\tchartType=\"ColumnChart\"\n\t\t\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons par année',\n\t\t\t\t\t\t\t\t\t\t\thAxis: {\n\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Années',\n\t\t\t\t\t\t\t\t\t\t\t\tformat: '#',\n\t\t\t\t\t\t\t\t\t\t\t\tmaxValue: 2020\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tvAxis: {\n\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Nombre de chansons'\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tlegend: {\n\t\t\t\t\t\t\t\t\t\t\t\tposition: 'none'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\tvariant=\"outlined\" \n\t\t\t\t\t\t\t\tstyle={{ marginTop: 50 }}\n\t\t\t\t\t\t\t\tonClick={ e => this.clearProps(\"artist\") }>\n\t\t\t\t\t\t\t\tChercher un autre artiste\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t}\n\t}\n\n\tcompareArtistsDisplay() {\n\t\tif(this.state.compareArtistsShow) {\n\t\t\tconst data = this.state.compareArtistsData\n\t\t\tif(!data) {\n\t\t\t\treturn <div>\n\t\t\t\t\t\t\t<h3>Comparer deux artistes</h3>\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\t\t\t\toptions={ this.state.searchArtist1Result.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist1\", \"artist\") }\n\t\t\t\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"searchArtist1TextField\"\n\t\t\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Artiste #1\"\n\t\t\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist1\") }\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\t\t\t\toptions={ this.state.searchArtist2Result.map(option => this.searchOptionRendering(option, \"artist\")) }\n\t\t\t\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"artist2\", \"artist\") }\n\t\t\t\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"searchArtist2TextField\"\n\t\t\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Artiste #2\"\n\t\t\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={ e => this.searchArtist(e, \"artist2\") }\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleCompareButtonClick(e, \"artist\") }>Comparer</Button>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</div>\n\t\t\t} \n\t\t\telse {\n\t\t\t\treturn <Card>\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\t\tid=\"compareArtistsChart\"\n\t\t\t\t\t\t\t\t\tchartType=\"BarChart\"\n\t\t\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\t\ttitle: 'Comparaison entre deux artistes'\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t</Card>\n\t\t\t}\n\t\t}\n\t}\n\n\tcompareSongsDisplay() {\n\t\tif(this.state.compareSongsShow) {\n\t\t\treturn <div>\n\t\t\t\t\t\t<h3>Comparer deux chansons</h3>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\toptions={ this.state.searchSong1Result.map(option => this.searchOptionRendering(option, \"song\")) }\n\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song1\", \"song\") }\n\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid=\"searchSong1TextField\"\n\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\tlabel=\"Chanson #1\"\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song1\") }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tfreeSolo\n\t\t\t\t\t\t\toptions={ this.state.searchSong2Result.map(option => this.searchOptionRendering(option, \"song\")) }\n\t\t\t\t\t\t\tfilterOptions={ options => { return options } }\n\t\t\t\t\t\t\tonChange={ e => this.handleSearchOptionSelection(e, \"song2\", \"song\") }\n\t\t\t\t\t\t\trenderInput={ params => (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tid=\"searchSong2TextField\"\n\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\tinputRef={ (input) => this.input = input }\n\t\t\t\t\t\t\t\t\tstyle={ { width : '300px' } }\n\t\t\t\t\t\t\t\t\tlabel=\"Chanson #2\"\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tonChange={ e => this.searchSong(e, \"song2\") }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button variant=\"outlined\" onClick={ e => this.handleCompareButtonClick(e, \"song\") }>Comparer</Button>\n\t\t\t\t\t</div>\n\t\t}\n\t}\n\n//////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////  RENDER  ////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n\trender() {\n\t\tconst { classes } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"App\" style={{ height : '500px' }}>\n\t\t\t\t\n\t\t\t\t<AppBar  position=\"fixed\" className={classes.appBar}>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography className={classes.title} variant=\"h6\" noWrap>\n\t\t\t\t\t\t\tMaterial-UI\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tonClick={ this.getState.bind(this) }>\n\t\t\t\t\t\t\t\tGet state\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\n\t\t\t\t<Drawer variant=\"permanent\" className={classes.drawer}>\n\t\t\t\t\t<div className={classes.toolbarSpacer} />\n\t\t\t\t\t<List>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 0 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 0) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Popularité des genres\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 1 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 1) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Popularité des langues\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<Divider />\n\t\t\t\t\t\t<ListItem \n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 2 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 2) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Chercher un artiste\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<ListItem \n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\tselected={ this.state.drawerSelectedIndex === 3 }\n\t\t\t\t\t\t\tonClick={ e => this.handleListItemSelect(e, 3) } >\n\t\t\t\t\t\t\t<ListItemText primary=\"Comparer deux artistes\" />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t</List>\n\t\t\t\t</Drawer>\n\n\t\t\t\t<div className={classes.main}>\n\t\t\t\t\t<div className={classes.toolbarSpacer} />\n\n\t\t\t\t\t{this.topGenreChart()}\n\t\t\t\t\t{this.topLanguageChart()}\n\t\t\t\t\t{this.searchArtistDisplay()}\n\t\t\t\t\t{this.compareArtistsDisplay()}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default withStyles(styles)(App)"]},"metadata":{},"sourceType":"module"}